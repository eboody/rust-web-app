/*
 * Facebook Marketing API
 *
 * This is a generated connector for [Facebook Marketing API v12.0](https://developers.facebook.com/docs/marketing-apis) OpenAPI specification.  Facebook is an American online social media and social networking service owned by Facebook, Inc.Facebook Marketing  APIs are a collection of Graph API endpoints that can be used to help you advertise on Facebook.
 *
 * The version of the OpenAPI document: v12.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait CampaignApi: Send + Sync {
	async fn create_campaign<'ad_account_id, 'properties>(
		&self,
		ad_account_id: &'ad_account_id str,
		properties: models::Campaign,
	) -> Result<models::CampaignResponse, Error<CreateCampaignError>>;
	async fn delete_campaign<'campaign_id>(
		&self,
		campaign_id: &'campaign_id str,
	) -> Result<models::CampaignResponse, Error<DeleteCampaignError>>;
	async fn dissociate_campaign<
		'ad_account_id,
		'delete_strategy,
		'before_date,
		'object_count,
	>(
		&self,
		ad_account_id: &'ad_account_id str,
		delete_strategy: &'delete_strategy str,
		before_date: Option<&'before_date str>,
		object_count: Option<i32>,
	) -> Result<models::CampaignDissociateResponse, Error<DissociateCampaignError>>;
	async fn get_campaigns<
		'ad_account_id,
		'date_preset,
		'effective_status,
		'is_completed,
		'time_range,
		'fields,
		'summary,
	>(
		&self,
		ad_account_id: &'ad_account_id str,
		date_preset: Option<&'date_preset str>,
		effective_status: Option<Vec<String>>,
		is_completed: Option<bool>,
		time_range: Option<models::TimeRange>,
		fields: Option<Vec<String>>,
		summary: Option<Vec<String>>,
	) -> Result<models::CampaignList, Error<GetCampaignsError>>;
	async fn update_campaign<'campaign_id, 'properties>(
		&self,
		campaign_id: &'campaign_id str,
		properties: models::CampaignUpdate,
	) -> Result<models::CampaignResponse, Error<UpdateCampaignError>>;
}

pub struct CampaignApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl CampaignApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

#[async_trait]
impl CampaignApi for CampaignApiClient {
	/// Cerates a campaign.
	async fn create_campaign<'ad_account_id, 'properties>(
		&self,
		ad_account_id: &'ad_account_id str,
		properties: models::Campaign,
	) -> Result<models::CampaignResponse, Error<CreateCampaignError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/act_{ad_account_id}/campaigns",
			local_var_configuration.base_path,
			ad_account_id = crate::apis::urlencode(ad_account_id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		local_var_req_builder =
			local_var_req_builder.query(&[("properties", &properties.to_string())]);
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => {
					format!("{} {}", local_var_prefix, local_var_key)
				}
				None => local_var_key,
			};
			local_var_req_builder =
				local_var_req_builder.query(&[("access_token", local_var_value)]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<CreateCampaignError> =
				serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Deletes a campaign.
	async fn delete_campaign<'campaign_id>(
		&self,
		campaign_id: &'campaign_id str,
	) -> Result<models::CampaignResponse, Error<DeleteCampaignError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/{campaign_id}",
			local_var_configuration.base_path,
			campaign_id = crate::apis::urlencode(campaign_id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => {
					format!("{} {}", local_var_prefix, local_var_key)
				}
				None => local_var_key,
			};
			local_var_req_builder =
				local_var_req_builder.query(&[("access_token", local_var_value)]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeleteCampaignError> =
				serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Dissociate a campaign from an AdAccount.
	async fn dissociate_campaign<
		'ad_account_id,
		'delete_strategy,
		'before_date,
		'object_count,
	>(
		&self,
		ad_account_id: &'ad_account_id str,
		delete_strategy: &'delete_strategy str,
		before_date: Option<&'before_date str>,
		object_count: Option<i32>,
	) -> Result<models::CampaignDissociateResponse, Error<DissociateCampaignError>>
	{
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/act_{ad_account_id}/campaigns",
			local_var_configuration.base_path,
			ad_account_id = crate::apis::urlencode(ad_account_id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_str) = before_date {
			local_var_req_builder = local_var_req_builder
				.query(&[("before_date", &local_var_str.to_string())]);
		}
		local_var_req_builder = local_var_req_builder
			.query(&[("delete_strategy", &delete_strategy.to_string())]);
		if let Some(ref local_var_str) = object_count {
			local_var_req_builder = local_var_req_builder
				.query(&[("object_count", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => {
					format!("{} {}", local_var_prefix, local_var_key)
				}
				None => local_var_key,
			};
			local_var_req_builder =
				local_var_req_builder.query(&[("access_token", local_var_value)]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DissociateCampaignError> =
				serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Returns campaigns under this ad account.
	async fn get_campaigns<
		'ad_account_id,
		'date_preset,
		'effective_status,
		'is_completed,
		'time_range,
		'fields,
		'summary,
	>(
		&self,
		ad_account_id: &'ad_account_id str,
		date_preset: Option<&'date_preset str>,
		effective_status: Option<Vec<String>>,
		is_completed: Option<bool>,
		time_range: Option<models::TimeRange>,
		fields: Option<Vec<String>>,
		summary: Option<Vec<String>>,
	) -> Result<models::CampaignList, Error<GetCampaignsError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/act_{ad_account_id}/campaigns",
			local_var_configuration.base_path,
			ad_account_id = crate::apis::urlencode(ad_account_id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_str) = date_preset {
			local_var_req_builder = local_var_req_builder
				.query(&[("date_preset", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = effective_status {
			local_var_req_builder = match "multi" {
				"multi" => local_var_req_builder.query(
					&local_var_str
						.iter()
						.map(|p| ("effective_status".to_owned(), p.to_string()))
						.collect::<Vec<(std::string::String, std::string::String)>>(
						),
				),
				_ => local_var_req_builder.query(&[(
					"effective_status",
					&local_var_str
						.iter()
						.map(|p| p.to_string())
						.collect::<Vec<String>>()
						.join(",")
						.to_string(),
				)]),
			};
		}
		if let Some(ref local_var_str) = is_completed {
			local_var_req_builder = local_var_req_builder
				.query(&[("is_completed", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = time_range {
			local_var_req_builder = local_var_req_builder
				.query(&[("time_range", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = fields {
			local_var_req_builder = match "csv" {
				"multi" => local_var_req_builder.query(
					&local_var_str
						.iter()
						.map(|p| ("fields".to_owned(), p.to_string()))
						.collect::<Vec<(std::string::String, std::string::String)>>(
						),
				),
				_ => local_var_req_builder.query(&[(
					"fields",
					&local_var_str
						.iter()
						.map(|p| p.to_string())
						.collect::<Vec<String>>()
						.join(",")
						.to_string(),
				)]),
			};
		}
		if let Some(ref local_var_str) = summary {
			local_var_req_builder = match "csv" {
				"multi" => local_var_req_builder.query(
					&local_var_str
						.iter()
						.map(|p| ("summary".to_owned(), p.to_string()))
						.collect::<Vec<(std::string::String, std::string::String)>>(
						),
				),
				_ => local_var_req_builder.query(&[(
					"summary",
					&local_var_str
						.iter()
						.map(|p| p.to_string())
						.collect::<Vec<String>>()
						.join(",")
						.to_string(),
				)]),
			};
		}
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => {
					format!("{} {}", local_var_prefix, local_var_key)
				}
				None => local_var_key,
			};
			local_var_req_builder =
				local_var_req_builder.query(&[("access_token", local_var_value)]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetCampaignsError> =
				serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Updates a campaign.
	async fn update_campaign<'campaign_id, 'properties>(
		&self,
		campaign_id: &'campaign_id str,
		properties: models::CampaignUpdate,
	) -> Result<models::CampaignResponse, Error<UpdateCampaignError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/{campaign_id}",
			local_var_configuration.base_path,
			campaign_id = crate::apis::urlencode(campaign_id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		local_var_req_builder =
			local_var_req_builder.query(&[("properties", &properties.to_string())]);
		if let Some(ref local_var_apikey) = local_var_configuration.api_key {
			let local_var_key = local_var_apikey.key.clone();
			let local_var_value = match local_var_apikey.prefix {
				Some(ref local_var_prefix) => {
					format!("{} {}", local_var_prefix, local_var_key)
				}
				None => local_var_key,
			};
			local_var_req_builder =
				local_var_req_builder.query(&[("access_token", local_var_value)]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			serde_json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<UpdateCampaignError> =
				serde_json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`create_campaign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCampaignError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_campaign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCampaignError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dissociate_campaign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DissociateCampaignError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_campaigns`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCampaignsError {
	UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_campaign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCampaignError {
	UnknownValue(serde_json::Value),
}
