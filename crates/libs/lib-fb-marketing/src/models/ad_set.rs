/*
 * Facebook Marketing API
 *
 * This is a generated connector for [Facebook Marketing API v12.0](https://developers.facebook.com/docs/marketing-apis) OpenAPI specification.  Facebook is an American online social media and social networking service owned by Facebook, Inc.Facebook Marketing  APIs are a collection of Graph API endpoints that can be used to help you advertise on Facebook.
 *
 * The version of the OpenAPI document: v12.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AdSet : Ad set properties
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdSet {
	/// Specifies list of labels to be associated with this object. This field is optional
	#[serde(rename = "adlabels", skip_serializing_if = "Option::is_none")]
	pub adlabels: Option<Vec<json::Value>>,
	/// Ad set schedule, representing a delivery schedule for a single day
	#[serde(rename = "adset_schedule", skip_serializing_if = "Option::is_none")]
	pub adset_schedule: Option<Vec<models::AdSetSchedule>>,
	/// Array of attribution specs
	#[serde(rename = "attribution_spec", skip_serializing_if = "Option::is_none")]
	pub attribution_spec: Option<Vec<models::AttributionSpec>>,
	/// Bid cap or target cost for this ad set. The bid cap used in a lowest cost bid strategy is defined as the maximum bid you want to pay for a result based on your optimization_goal.
	#[serde(rename = "bid_amount", skip_serializing_if = "Option::is_none")]
	pub bid_amount: Option<i32>,
	/// Bid strategy for this campaign to suit your specific business goals
	#[serde(rename = "bid_strategy", skip_serializing_if = "Option::is_none")]
	pub bid_strategy: Option<BidStrategy>,
	/// The billing event
	#[serde(rename = "billing_event", skip_serializing_if = "Option::is_none")]
	pub billing_event: Option<BillingEvent>,
	#[serde(rename = "campaign_id", skip_serializing_if = "Option::is_none")]
	pub campaign_id: Option<Box<models::AdSetCampaignId>>,
	#[serde(rename = "campaign_spec", skip_serializing_if = "Option::is_none")]
	pub campaign_spec: Option<Box<models::CampignSpec>>,
	#[serde(
		rename = "contextual_bundling_spec",
		skip_serializing_if = "Option::is_none"
	)]
	pub contextual_bundling_spec: Option<Box<models::ContextualBundlingSpec>>,
	/// Order of the adgroup sequence to be shown to users
	#[serde(rename = "creative_sequence", skip_serializing_if = "Option::is_none")]
	pub creative_sequence: Option<Vec<models::AdSetUpdateCreativeSequenceInner>>,
	/// The daily budget defined in your account currency, allowed only for ad sets with a duration (difference between end_time and start_time) longer than 24 hours.
	#[serde(rename = "daily_budget", skip_serializing_if = "Option::is_none")]
	pub daily_budget: Option<i32>,
	/// Daily impressions. Available only for campaigns with buying_type=FIXED_CPM.
	#[serde(rename = "daily_imps", skip_serializing_if = "Option::is_none")]
	pub daily_imps: Option<i32>,
	/// Daily minimum spend target of the ad set defined in your account currency. To use this field, daily budget must be specified in the Campaign.
	#[serde(
		rename = "daily_min_spend_target",
		skip_serializing_if = "Option::is_none"
	)]
	pub daily_min_spend_target: Option<i32>,
	/// Daily spend cap of the ad set defined in your account currency. To use this field, daily budget must be specified in the Campaign.
	#[serde(rename = "daily_spend_cap", skip_serializing_if = "Option::is_none")]
	pub daily_spend_cap: Option<i32>,
	/// The billing event
	#[serde(rename = "destination_type", skip_serializing_if = "Option::is_none")]
	pub destination_type: Option<DestinationType>,
	/// End time, required when lifetime_budget is specified
	#[serde(rename = "end_time", skip_serializing_if = "Option::is_none")]
	pub end_time: Option<String>,
	/// An execution setting
	#[serde(rename = "execution_options", skip_serializing_if = "Option::is_none")]
	pub execution_options: Option<Vec<ExecutionOptions>>,
	/// Existing customer budget percentage
	#[serde(
		rename = "existing_customer_budget_percentage",
		skip_serializing_if = "Option::is_none"
	)]
	pub existing_customer_budget_percentage: Option<i32>,
	/// Indicates the ad set must only be used for dynamic creatives. Dynamic creative ads can be created in this ad set. Defaults to false
	#[serde(
		rename = "is_dynamic_creative",
		skip_serializing_if = "Option::is_none"
	)]
	pub is_dynamic_creative: Option<bool>,
	/// Lifetime budget of this campaign. All adsets under this campaign will share this budget.  You can either set budget at the campaign level or at the adset level, not both.  
	#[serde(rename = "lifetime_budget", skip_serializing_if = "Option::is_none")]
	pub lifetime_budget: Option<i32>,
	/// Lifetime impressions. Available only for campaigns with buying_type=FIXED_CPM
	#[serde(rename = "lifetime_imps", skip_serializing_if = "Option::is_none")]
	pub lifetime_imps: Option<i32>,
	/// Lifetime minimum spend target of the ad set defined in your account currency. To use this field, lifetime budget must be specified in the Campaign.
	#[serde(
		rename = "lifetime_min_spend_target",
		skip_serializing_if = "Option::is_none"
	)]
	pub lifetime_min_spend_target: Option<i32>,
	/// Lifetime spend cap of the ad set defined in your account currency. To use this field, lifetime budget must be specified in the Campaign.
	#[serde(rename = "lifetime_spend_cap", skip_serializing_if = "Option::is_none")]
	pub lifetime_spend_cap: Option<i32>,
	/// Multi optimization goal weight
	#[serde(
		rename = "multi_optimization_goal_weight",
		skip_serializing_if = "Option::is_none"
	)]
	pub multi_optimization_goal_weight: Option<MultiOptimizationGoalWeight>,
	/// Ad set name, max length of 400 characters.
	#[serde(rename = "name")]
	pub name: String,
	/// What the ad set is optimizing for.
	#[serde(rename = "optimization_goal", skip_serializing_if = "Option::is_none")]
	pub optimization_goal: Option<OptimizationGoal>,
	/// What the ad set is optimizing for.
	#[serde(
		rename = "optimization_sub_event",
		skip_serializing_if = "Option::is_none"
	)]
	pub optimization_sub_event: Option<OptimizationSubEvent>,
	/// Defines the pacing type, standard by default or using ad scheduling
	#[serde(rename = "pacing_type", skip_serializing_if = "Option::is_none")]
	pub pacing_type: Option<Vec<String>>,
	#[serde(rename = "rf_prediction_id", skip_serializing_if = "Option::is_none")]
	pub rf_prediction_id: Option<Box<models::AdSetUpdateRfPredictionId>>,
	#[serde(rename = "source_adset_id", skip_serializing_if = "Option::is_none")]
	pub source_adset_id: Option<Box<models::AdSetSourceAdsetId>>,
	#[serde(rename = "promoted_object", skip_serializing_if = "Option::is_none")]
	pub promoted_object: Option<Box<models::PromotedObject>>,
	/// The start time of the set
	#[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
	pub start_time: Option<String>,
	/// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
	#[serde(rename = "status", skip_serializing_if = "Option::is_none")]
	pub status: Option<Status>,
	/// An ad set's targeting structure. \"countries\" is required.
	#[serde(rename = "targeting", skip_serializing_if = "Option::is_none")]
	pub targeting: Option<json::Value>,
	/// Specify ad creative that displays at custom date ranges in a campaign as an array. A list of Adgroup IDs
	#[serde(
		rename = "time_based_ad_rotation_id_blocks",
		skip_serializing_if = "Option::is_none"
	)]
	pub time_based_ad_rotation_id_blocks: Option<Vec<Vec<i32>>>,
	/// Date range when specific ad creative displays during a campaign. Provide date ranges in an array of UNIX timestamps where each timestamp represents the start time for each date range.
	#[serde(
		rename = "time_based_ad_rotation_intervals",
		skip_serializing_if = "Option::is_none"
	)]
	pub time_based_ad_rotation_intervals: Option<Vec<i32>>,
	/// Time start
	#[serde(rename = "time_start", skip_serializing_if = "Option::is_none")]
	pub time_start: Option<String>,
	/// Time stop
	#[serde(rename = "time_stop", skip_serializing_if = "Option::is_none")]
	pub time_stop: Option<String>,
	/// Tune for category
	#[serde(rename = "tune_for_category", skip_serializing_if = "Option::is_none")]
	pub tune_for_category: Option<TuneForCategory>,
}

impl AdSet {
	/// Ad set properties
	pub fn new(name: String) -> AdSet {
		AdSet {
			adlabels: None,
			adset_schedule: None,
			attribution_spec: None,
			bid_amount: None,
			bid_strategy: None,
			billing_event: None,
			campaign_id: None,
			campaign_spec: None,
			contextual_bundling_spec: None,
			creative_sequence: None,
			daily_budget: None,
			daily_imps: None,
			daily_min_spend_target: None,
			daily_spend_cap: None,
			destination_type: None,
			end_time: None,
			execution_options: None,
			existing_customer_budget_percentage: None,
			is_dynamic_creative: None,
			lifetime_budget: None,
			lifetime_imps: None,
			lifetime_min_spend_target: None,
			lifetime_spend_cap: None,
			multi_optimization_goal_weight: None,
			name,
			optimization_goal: None,
			optimization_sub_event: None,
			pacing_type: None,
			rf_prediction_id: None,
			source_adset_id: None,
			promoted_object: None,
			start_time: None,
			status: None,
			targeting: None,
			time_based_ad_rotation_id_blocks: None,
			time_based_ad_rotation_intervals: None,
			time_start: None,
			time_stop: None,
			tune_for_category: None,
		}
	}
	pub fn to_string(&self) -> String {
		json::to_string(self).expect("to_string failed")
	}
}
/// Bid strategy for this campaign to suit your specific business goals
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum BidStrategy {
	#[serde(rename = "LOWEST_COST_WITHOUT_CAP")]
	LowestCostWithoutCap,
	#[serde(rename = "LOWEST_COST_WITH_BID_CAP")]
	LowestCostWithBidCap,
	#[serde(rename = "COST_CAP")]
	CostCap,
}

impl Default for BidStrategy {
	fn default() -> BidStrategy {
		Self::LowestCostWithoutCap
	}
}
/// The billing event
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum BillingEvent {
	#[serde(rename = "APP_INSTALLS")]
	AppInstalls,
	#[serde(rename = "CLICKS")]
	Clicks,
	#[serde(rename = "IMPRESSIONS")]
	Impressions,
	#[serde(rename = "LINK_CLICKS")]
	LinkClicks,
	#[serde(rename = "NONE")]
	None,
	#[serde(rename = "OFFER_CLAIMS")]
	OfferClaims,
	#[serde(rename = "PAGE_LIKES")]
	PageLikes,
	#[serde(rename = "POST_ENGAGEMENT")]
	PostEngagement,
	#[serde(rename = "THRUPLAY")]
	Thruplay,
	#[serde(rename = "PURCHASE")]
	Purchase,
	#[serde(rename = "LISTING_INTERACTION")]
	ListingInteraction,
}

impl Default for BillingEvent {
	fn default() -> BillingEvent {
		Self::AppInstalls
	}
}
/// The billing event
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum DestinationType {
	#[serde(rename = "UNDEFINED")]
	Undefined,
	#[serde(rename = "WEBSITE")]
	Website,
	#[serde(rename = "APP")]
	App,
	#[serde(rename = "MESSENGER")]
	Messenger,
	#[serde(rename = "APPLINKS_AUTOMATIC")]
	ApplinksAutomatic,
	#[serde(rename = "FACEBOOK")]
	Facebook,
}

impl Default for DestinationType {
	fn default() -> DestinationType {
		Self::Undefined
	}
}
/// An execution setting
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum ExecutionOptions {
	#[serde(rename = "validate_only")]
	ValidateOnly,
	#[serde(rename = "include_recommendations")]
	IncludeRecommendations,
}

impl Default for ExecutionOptions {
	fn default() -> ExecutionOptions {
		Self::ValidateOnly
	}
}
/// Multi optimization goal weight
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum MultiOptimizationGoalWeight {
	#[serde(rename = "UNDEFINED")]
	Undefined,
	#[serde(rename = "BALANCED")]
	Balanced,
	#[serde(rename = "PREFER_INSTALL")]
	PreferInstall,
	#[serde(rename = "PREFER_EVENT")]
	PreferEvent,
}

impl Default for MultiOptimizationGoalWeight {
	fn default() -> MultiOptimizationGoalWeight {
		Self::Undefined
	}
}
/// What the ad set is optimizing for.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum OptimizationGoal {
	#[serde(rename = "NONE")]
	None,
	#[serde(rename = "APP_INSTALLS")]
	AppInstalls,
	#[serde(rename = "AD_RECALL_LIFT")]
	AdRecallLift,
	#[serde(rename = "ENGAGED_USERS")]
	EngagedUsers,
	#[serde(rename = "EVENT_RESPONSES")]
	EventResponses,
	#[serde(rename = "IMPRESSIONS")]
	Impressions,
	#[serde(rename = "LEAD_GENERATION")]
	LeadGeneration,
	#[serde(rename = "QUALITY_LEAD")]
	QualityLead,
	#[serde(rename = "LINK_CLICKS")]
	LinkClicks,
	#[serde(rename = "OFFSITE_CONVERSIONS")]
	OffsiteConversions,
	#[serde(rename = "PAGE_LIKES")]
	PageLikes,
	#[serde(rename = "POST_ENGAGEMENT")]
	PostEngagement,
	#[serde(rename = "QUALITY_CALL")]
	QualityCall,
	#[serde(rename = "REACH")]
	Reach,
	#[serde(rename = "LANDING_PAGE_VIEWS")]
	LandingPageViews,
	#[serde(rename = "VISIT_INSTAGRAM_PROFILE")]
	VisitInstagramProfile,
	#[serde(rename = "VALUE")]
	Value,
	#[serde(rename = "THRUPLAY")]
	Thruplay,
	#[serde(rename = "DERIVED_EVENTS")]
	DerivedEvents,
	#[serde(rename = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS")]
	AppInstallsAndOffsiteConversions,
	#[serde(rename = "CONVERSATIONS")]
	Conversations,
}

impl Default for OptimizationGoal {
	fn default() -> OptimizationGoal {
		Self::None
	}
}
/// What the ad set is optimizing for.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum OptimizationSubEvent {
	#[serde(rename = "NONE")]
	None,
	#[serde(rename = "VIDEO_SOUND_ON")]
	VideoSoundOn,
	#[serde(rename = "TRIP_CONSIDERATION")]
	TripConsideration,
	#[serde(rename = "TRAVEL_INTENT")]
	TravelIntent,
	#[serde(rename = "TRAVEL_INTENT_NO_DESTINATION_INTENT")]
	TravelIntentNoDestinationIntent,
	#[serde(rename = "TRAVEL_INTENT_BUCKET_01")]
	TravelIntentBucket01,
	#[serde(rename = "TRAVEL_INTENT_BUCKET_02")]
	TravelIntentBucket02,
	#[serde(rename = "TRAVEL_INTENT_BUCKET_03")]
	TravelIntentBucket03,
	#[serde(rename = "TRAVEL_INTENT_BUCKET_04")]
	TravelIntentBucket04,
	#[serde(rename = "TRAVEL_INTENT_BUCKET_05")]
	TravelIntentBucket05,
}

impl Default for OptimizationSubEvent {
	fn default() -> OptimizationSubEvent {
		Self::None
	}
}
/// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Status {
	#[serde(rename = "ACTIVE")]
	Active,
	#[serde(rename = "PAUSED")]
	Paused,
	#[serde(rename = "DELETED")]
	Deleted,
	#[serde(rename = "ARCHIVED")]
	Archived,
}

impl Default for Status {
	fn default() -> Status {
		Self::Active
	}
}
/// Tune for category
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum TuneForCategory {
	#[serde(rename = "NONE")]
	None,
	#[serde(rename = "EMPLOYMENT")]
	Employment,
	#[serde(rename = "HOUSING")]
	Housing,
	#[serde(rename = "CREDIT")]
	Credit,
	#[serde(rename = "ISSUES_ELECTIONS_POLITICS")]
	IssuesElectionsPolitics,
	#[serde(rename = "ONLINE_GAMBLING_AND_GAMING")]
	OnlineGamblingAndGaming,
}

impl Default for TuneForCategory {
	fn default() -> TuneForCategory {
		Self::None
	}
}
