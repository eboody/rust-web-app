/*
 * Facebook Marketing API
 *
 * This is a generated connector for [Facebook Marketing API v12.0](https://developers.facebook.com/docs/marketing-apis) OpenAPI specification.  Facebook is an American online social media and social networking service owned by Facebook, Inc.Facebook Marketing  APIs are a collection of Graph API endpoints that can be used to help you advertise on Facebook. 
 *
 * The version of the OpenAPI document: v12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AdSetSchedule : Ad set schedule, representing a delivery schedule for a single day
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdSetSchedule {
    /// A 0 based minute of the day representing when the schedule starts
    #[serde(rename = "start_minute", skip_serializing_if = "Option::is_none")]
    pub start_minute: Option<i32>,
    /// A 0 based minute of the day representing when the schedule ends
    #[serde(rename = "end_minute")]
    pub end_minute: i32,
    /// Array of ints representing which days the schedule is active. Valid values are 0-6 with 0 representing Sunday,  1 representing Monday, ... and 6 representing Saturday. 
    #[serde(rename = "days")]
    pub days: Vec<i32>,
    /// Timezone type
    #[serde(rename = "timezone_type", skip_serializing_if = "Option::is_none")]
    pub timezone_type: Option<TimezoneType>,
}

impl AdSetSchedule {
    /// Ad set schedule, representing a delivery schedule for a single day
    pub fn new(end_minute: i32, days: Vec<i32>) -> AdSetSchedule {
        AdSetSchedule {
            start_minute: None,
            end_minute,
            days,
            timezone_type: None,
        }
    }
}
/// Timezone type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TimezoneType {
    #[serde(rename = "USER")]
    User,
    #[serde(rename = "ADVERTISER")]
    Advertiser,
}

impl Default for TimezoneType {
    fn default() -> TimezoneType {
        Self::User
    }
}

