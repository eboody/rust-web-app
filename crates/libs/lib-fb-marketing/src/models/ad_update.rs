/*
 * Facebook Marketing API
 *
 * This is a generated connector for [Facebook Marketing API v12.0](https://developers.facebook.com/docs/marketing-apis) OpenAPI specification.  Facebook is an American online social media and social networking service owned by Facebook, Inc.Facebook Marketing  APIs are a collection of Graph API endpoints that can be used to help you advertise on Facebook.
 *
 * The version of the OpenAPI document: v12.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AdUpdate : Ad update properties
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdUpdate {
	/// Ad labels associated with this ad
	#[serde(rename = "adlabels", skip_serializing_if = "Option::is_none")]
	pub adlabels: Option<Vec<serde_json::Value>>,
	/// The ID of the audience
	#[serde(rename = "audience_id", skip_serializing_if = "Option::is_none")]
	pub audience_id: Option<String>,
	/// Bid amount for this ad which will be used in auction instead of the ad set bid_amount, if specified.  Any updates to the ad set bid_amount will overwrite this value with the new ad set value.
	#[serde(rename = "bid_amount", skip_serializing_if = "Option::is_none")]
	pub bid_amount: Option<i32>,
	/// The domain where conversions happen. Required to create or update an ad in a campaign that shares data with a pixel.
	#[serde(rename = "conversion_domain", skip_serializing_if = "Option::is_none")]
	pub conversion_domain: Option<String>,
	/// This field is required for create. The ID or creative spec of the ad creative to be used by this ad.
	#[serde(rename = "creative")]
	pub creative: serde_json::Value,
	/// The sequence of the ad within the same campaign
	#[serde(rename = "display_sequence", skip_serializing_if = "Option::is_none")]
	pub display_sequence: Option<i32>,
	#[serde(rename = "draft_adgroup_id", skip_serializing_if = "Option::is_none")]
	pub draft_adgroup_id: Option<Box<models::AdUpdateDraftAdgroupId>>,
	/// Flag to create a new audience based on users who engage with this ad
	#[serde(
		rename = "engagement_audience",
		skip_serializing_if = "Option::is_none"
	)]
	pub engagement_audience: Option<String>,
	/// An execution setting
	#[serde(rename = "execution_options", skip_serializing_if = "Option::is_none")]
	pub execution_options: Option<Vec<ExecutionOptions>>,
	/// Include the demolink hashes
	#[serde(
		rename = "include_demolink_hashes",
		skip_serializing_if = "Option::is_none"
	)]
	pub include_demolink_hashes: Option<bool>,
	/// Name of the ad
	#[serde(rename = "name", skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
	#[serde(rename = "status", skip_serializing_if = "Option::is_none")]
	pub status: Option<Status>,
	/// With Tracking Specs, you log actions taken by people on your ad.
	#[serde(rename = "tracking_specs", skip_serializing_if = "Option::is_none")]
	pub tracking_specs: Option<serde_json::Value>,
}

impl AdUpdate {
	/// Ad update properties
	pub fn new(creative: serde_json::Value) -> AdUpdate {
		AdUpdate {
			adlabels: None,
			audience_id: None,
			bid_amount: None,
			conversion_domain: None,
			creative,
			display_sequence: None,
			draft_adgroup_id: None,
			engagement_audience: None,
			execution_options: None,
			include_demolink_hashes: None,
			name: None,
			status: None,
			tracking_specs: None,
		}
	}

	pub fn to_string(&self) -> String {
		serde_json::to_string(self).unwrap()
	}
}
/// An execution setting
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum ExecutionOptions {
	#[serde(rename = "validate_only")]
	ValidateOnly,
	#[serde(rename = "synchronous_ad_review")]
	SynchronousAdReview,
	#[serde(rename = "include_recommendations")]
	IncludeRecommendations,
}

impl Default for ExecutionOptions {
	fn default() -> ExecutionOptions {
		Self::ValidateOnly
	}
}
/// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Status {
	#[serde(rename = "ACTIVE")]
	Active,
	#[serde(rename = "PAUSED")]
	Paused,
	#[serde(rename = "DELETED")]
	Deleted,
	#[serde(rename = "ARCHIVED")]
	Archived,
}

impl Default for Status {
	fn default() -> Status {
		Self::Active
	}
}
