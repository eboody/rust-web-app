/*
 * Facebook Marketing API
 *
 * This is a generated connector for [Facebook Marketing API v12.0](https://developers.facebook.com/docs/marketing-apis) OpenAPI specification.  Facebook is an American online social media and social networking service owned by Facebook, Inc.Facebook Marketing  APIs are a collection of Graph API endpoints that can be used to help you advertise on Facebook. 
 *
 * The version of the OpenAPI document: v12.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CampaignUpdate : Campaign operationupdate properties
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CampaignUpdate {
    /// Ad Labels associated with this campaign
    #[serde(rename = "adlabels", skip_serializing_if = "Option::is_none")]
    pub adlabels: Option<Vec<serde_json::Value>>,
    /// A map of child adset IDs to their respective bid amounts required in the process of toggling campaign from autobid to manual bid
    #[serde(rename = "adset_bid_amounts", skip_serializing_if = "Option::is_none")]
    pub adset_bid_amounts: Option<serde_json::Value>,
    #[serde(rename = "adset_budgets", skip_serializing_if = "Option::is_none")]
    pub adset_budgets: Option<Box<models::AdsetBudgets>>,
    /// Bid strategy for this campaign to suit your specific business goals
    #[serde(rename = "bid_strategy", skip_serializing_if = "Option::is_none")]
    pub bid_strategy: Option<BidStrategy>,
    /// Whether to automatically rebalance budgets daily for all the adsets under this campaign
    #[serde(rename = "budget_rebalance_flag", skip_serializing_if = "Option::is_none")]
    pub budget_rebalance_flag: Option<bool>,
    /// Campaign optimization type
    #[serde(rename = "campaign_optimization_type", skip_serializing_if = "Option::is_none")]
    pub campaign_optimization_type: Option<CampaignOptimizationType>,
    /// Daily budget of this campaign. All adsets under this campaign will share this budget.
    #[serde(rename = "daily_budget", skip_serializing_if = "Option::is_none")]
    pub daily_budget: Option<i32>,
    /// An execution setting
    #[serde(rename = "execution_options", skip_serializing_if = "Option::is_none")]
    pub execution_options: Option<Vec<ExecutionOptions>>,
    /// To create an iOS 14 campaign, enable SKAdNetwork attribution for this campaign
    #[serde(rename = "is_skadnetwork_attribution", skip_serializing_if = "Option::is_none")]
    pub is_skadnetwork_attribution: Option<bool>,
    /// Is using l3 schedule
    #[serde(rename = "is_using_l3_schedule", skip_serializing_if = "Option::is_none")]
    pub is_using_l3_schedule: Option<bool>,
    /// An Array of Iterative Split Test Configs created under this campaign
    #[serde(rename = "iterative_split_test_configs", skip_serializing_if = "Option::is_none")]
    pub iterative_split_test_configs: Option<Vec<String>>,
    /// Lifetime budget of this campaign. All adsets under this campaign will share this budget.  You can either set budget at the campaign level or at the adset level, not both.  
    #[serde(rename = "lifetime_budget", skip_serializing_if = "Option::is_none")]
    pub lifetime_budget: Option<i32>,
    /// Name for this campaign
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Campaign's objective. If it is specified the API will validate that any ads created under the campaign match that objective.
    #[serde(rename = "objective", skip_serializing_if = "Option::is_none")]
    pub objective: Option<Objective>,
    #[serde(rename = "promoted_object", skip_serializing_if = "Option::is_none")]
    pub promoted_object: Option<Box<models::PromotedObject>>,
    /// Samrt promotion type
    #[serde(rename = "smart_promotion_type", skip_serializing_if = "Option::is_none")]
    pub smart_promotion_type: Option<SmartPromotionType>,
    /// Special ad categories
    #[serde(rename = "special_ad_categories")]
    pub special_ad_categories: Vec<SpecialAdCategories>,
    /// Special ad category country
    #[serde(rename = "special_ad_category_country", skip_serializing_if = "Option::is_none")]
    pub special_ad_category_country: Option<String>,
    /// A spend cap for the campaign, such that it will not spend more than this cap. Defined as integer value of  subunit in your currency with a minimum value of $100 USD (or approximate local equivalent).  
    #[serde(rename = "spend_cap", skip_serializing_if = "Option::is_none")]
    pub spend_cap: Option<i32>,
    /// Start time
    #[serde(rename = "start_time", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// Stop time
    #[serde(rename = "stop_time", skip_serializing_if = "Option::is_none")]
    pub stop_time: Option<String>,
    /// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Upstream events
    #[serde(rename = "upstream_events", skip_serializing_if = "Option::is_none")]
    pub upstream_events: Option<serde_json::Value>,
}

impl CampaignUpdate {
    /// Campaign operationupdate properties
    pub fn new(special_ad_categories: Vec<SpecialAdCategories>) -> CampaignUpdate {
        CampaignUpdate {
            adlabels: None,
            adset_bid_amounts: None,
            adset_budgets: None,
            bid_strategy: None,
            budget_rebalance_flag: None,
            campaign_optimization_type: None,
            daily_budget: None,
            execution_options: None,
            is_skadnetwork_attribution: None,
            is_using_l3_schedule: None,
            iterative_split_test_configs: None,
            lifetime_budget: None,
            name: None,
            objective: None,
            promoted_object: None,
            smart_promotion_type: None,
            special_ad_categories,
            special_ad_category_country: None,
            spend_cap: None,
            start_time: None,
            stop_time: None,
            status: None,
            upstream_events: None,
        }
    }
}
/// Bid strategy for this campaign to suit your specific business goals
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BidStrategy {
    #[serde(rename = "LOWEST_COST_WITHOUT_CAP")]
    LowestCostWithoutCap,
    #[serde(rename = "LOWEST_COST_WITH_BID_CAP")]
    LowestCostWithBidCap,
    #[serde(rename = "COST_CAP")]
    CostCap,
}

impl Default for BidStrategy {
    fn default() -> BidStrategy {
        Self::LowestCostWithoutCap
    }
}
/// Campaign optimization type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CampaignOptimizationType {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "ICO_ONLY")]
    IcoOnly,
}

impl Default for CampaignOptimizationType {
    fn default() -> CampaignOptimizationType {
        Self::None
    }
}
/// An execution setting
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExecutionOptions {
    #[serde(rename = "validate_only")]
    ValidateOnly,
    #[serde(rename = "include_recommendations")]
    IncludeRecommendations,
}

impl Default for ExecutionOptions {
    fn default() -> ExecutionOptions {
        Self::ValidateOnly
    }
}
/// Campaign's objective. If it is specified the API will validate that any ads created under the campaign match that objective.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Objective {
    #[serde(rename = "APP_INSTALLS")]
    AppInstalls,
    #[serde(rename = "BRAND_AWARENESS")]
    BrandAwareness,
    #[serde(rename = "CONVERSIONS")]
    Conversions,
    #[serde(rename = "EVENT_RESPONSES")]
    EventResponses,
    #[serde(rename = "LEAD_GENERATION")]
    LeadGeneration,
    #[serde(rename = "LINK_CLICKS")]
    LinkClicks,
    #[serde(rename = "LOCAL_AWARENESS")]
    LocalAwareness,
    #[serde(rename = "MESSAGES")]
    Messages,
    #[serde(rename = "OFFER_CLAIMS")]
    OfferClaims,
    #[serde(rename = "PAGE_LIKES")]
    PageLikes,
    #[serde(rename = "POST_ENGAGEMENT")]
    PostEngagement,
    #[serde(rename = "PRODUCT_CATALOG_SALES")]
    ProductCatalogSales,
    #[serde(rename = "REACH")]
    Reach,
    #[serde(rename = "STORE_VISITS")]
    StoreVisits,
    #[serde(rename = "VIDEO_VIEWS")]
    VideoViews,
}

impl Default for Objective {
    fn default() -> Objective {
        Self::AppInstalls
    }
}
/// Samrt promotion type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SmartPromotionType {
    #[serde(rename = "GUIDED_CREATION")]
    GuidedCreation,
    #[serde(rename = "SMART_APP_PROMOTION")]
    SmartAppPromotion,
}

impl Default for SmartPromotionType {
    fn default() -> SmartPromotionType {
        Self::GuidedCreation
    }
}
/// Special ad categories
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SpecialAdCategories {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "EMPLOYMENT")]
    Employment,
    #[serde(rename = "HOUSING")]
    Housing,
    #[serde(rename = "CREDIT")]
    Credit,
    #[serde(rename = "ISSUES_ELECTIONS_POLITICS")]
    IssuesElectionsPolitics,
    #[serde(rename = "ONLINE_GAMBLING_AND_GAMING")]
    OnlineGamblingAndGaming,
}

impl Default for SpecialAdCategories {
    fn default() -> SpecialAdCategories {
        Self::None
    }
}
/// Only ACTIVE and PAUSED are valid during creation. Other statuses can be used for update
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ACTIVE")]
    Active,
    #[serde(rename = "PAUSED")]
    Paused,
    #[serde(rename = "DELETED")]
    Deleted,
    #[serde(rename = "ARCHIVED")]
    Archived,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}

