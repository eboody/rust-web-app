/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Application : Application model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Application {
    /// The application identifier in the database.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The application description.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The repository project identifier.
    #[serde(rename = "repository_project_id", skip_serializing_if = "Option::is_none")]
    pub repository_project_id: Option<i32>,
    /// The application UUID.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The application name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The application domains.
    #[serde(rename = "fqdn", skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    /// Configuration hash.
    #[serde(rename = "config_hash", skip_serializing_if = "Option::is_none")]
    pub config_hash: Option<String>,
    /// Git repository URL.
    #[serde(rename = "git_repository", skip_serializing_if = "Option::is_none")]
    pub git_repository: Option<String>,
    /// Git branch.
    #[serde(rename = "git_branch", skip_serializing_if = "Option::is_none")]
    pub git_branch: Option<String>,
    /// Git commit SHA.
    #[serde(rename = "git_commit_sha", skip_serializing_if = "Option::is_none")]
    pub git_commit_sha: Option<String>,
    /// Git full URL.
    #[serde(rename = "git_full_url", skip_serializing_if = "Option::is_none")]
    pub git_full_url: Option<String>,
    /// Docker registry image name.
    #[serde(rename = "docker_registry_image_name", skip_serializing_if = "Option::is_none")]
    pub docker_registry_image_name: Option<String>,
    /// Docker registry image tag.
    #[serde(rename = "docker_registry_image_tag", skip_serializing_if = "Option::is_none")]
    pub docker_registry_image_tag: Option<String>,
    /// Build pack.
    #[serde(rename = "build_pack", skip_serializing_if = "Option::is_none")]
    pub build_pack: Option<BuildPack>,
    /// Static image used when static site is deployed.
    #[serde(rename = "static_image", skip_serializing_if = "Option::is_none")]
    pub static_image: Option<String>,
    /// Install command.
    #[serde(rename = "install_command", skip_serializing_if = "Option::is_none")]
    pub install_command: Option<String>,
    /// Build command.
    #[serde(rename = "build_command", skip_serializing_if = "Option::is_none")]
    pub build_command: Option<String>,
    /// Start command.
    #[serde(rename = "start_command", skip_serializing_if = "Option::is_none")]
    pub start_command: Option<String>,
    /// Ports exposes.
    #[serde(rename = "ports_exposes", skip_serializing_if = "Option::is_none")]
    pub ports_exposes: Option<String>,
    /// Ports mappings.
    #[serde(rename = "ports_mappings", skip_serializing_if = "Option::is_none")]
    pub ports_mappings: Option<String>,
    /// Base directory for all commands.
    #[serde(rename = "base_directory", skip_serializing_if = "Option::is_none")]
    pub base_directory: Option<String>,
    /// Publish directory.
    #[serde(rename = "publish_directory", skip_serializing_if = "Option::is_none")]
    pub publish_directory: Option<String>,
    /// Health check enabled.
    #[serde(rename = "health_check_enabled", skip_serializing_if = "Option::is_none")]
    pub health_check_enabled: Option<bool>,
    /// Health check path.
    #[serde(rename = "health_check_path", skip_serializing_if = "Option::is_none")]
    pub health_check_path: Option<String>,
    /// Health check port.
    #[serde(rename = "health_check_port", skip_serializing_if = "Option::is_none")]
    pub health_check_port: Option<String>,
    /// Health check host.
    #[serde(rename = "health_check_host", skip_serializing_if = "Option::is_none")]
    pub health_check_host: Option<String>,
    /// Health check method.
    #[serde(rename = "health_check_method", skip_serializing_if = "Option::is_none")]
    pub health_check_method: Option<String>,
    /// Health check return code.
    #[serde(rename = "health_check_return_code", skip_serializing_if = "Option::is_none")]
    pub health_check_return_code: Option<i32>,
    /// Health check scheme.
    #[serde(rename = "health_check_scheme", skip_serializing_if = "Option::is_none")]
    pub health_check_scheme: Option<String>,
    /// Health check response text.
    #[serde(rename = "health_check_response_text", skip_serializing_if = "Option::is_none")]
    pub health_check_response_text: Option<String>,
    /// Health check interval in seconds.
    #[serde(rename = "health_check_interval", skip_serializing_if = "Option::is_none")]
    pub health_check_interval: Option<i32>,
    /// Health check timeout in seconds.
    #[serde(rename = "health_check_timeout", skip_serializing_if = "Option::is_none")]
    pub health_check_timeout: Option<i32>,
    /// Health check retries count.
    #[serde(rename = "health_check_retries", skip_serializing_if = "Option::is_none")]
    pub health_check_retries: Option<i32>,
    /// Health check start period in seconds.
    #[serde(rename = "health_check_start_period", skip_serializing_if = "Option::is_none")]
    pub health_check_start_period: Option<i32>,
    /// Memory limit.
    #[serde(rename = "limits_memory", skip_serializing_if = "Option::is_none")]
    pub limits_memory: Option<String>,
    /// Memory swap limit.
    #[serde(rename = "limits_memory_swap", skip_serializing_if = "Option::is_none")]
    pub limits_memory_swap: Option<String>,
    /// Memory swappiness.
    #[serde(rename = "limits_memory_swappiness", skip_serializing_if = "Option::is_none")]
    pub limits_memory_swappiness: Option<i32>,
    /// Memory reservation.
    #[serde(rename = "limits_memory_reservation", skip_serializing_if = "Option::is_none")]
    pub limits_memory_reservation: Option<String>,
    /// CPU limit.
    #[serde(rename = "limits_cpus", skip_serializing_if = "Option::is_none")]
    pub limits_cpus: Option<String>,
    /// CPU set.
    #[serde(rename = "limits_cpuset", skip_serializing_if = "Option::is_none")]
    pub limits_cpuset: Option<String>,
    /// CPU shares.
    #[serde(rename = "limits_cpu_shares", skip_serializing_if = "Option::is_none")]
    pub limits_cpu_shares: Option<i32>,
    /// Application status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Preview URL template.
    #[serde(rename = "preview_url_template", skip_serializing_if = "Option::is_none")]
    pub preview_url_template: Option<String>,
    /// Destination type.
    #[serde(rename = "destination_type", skip_serializing_if = "Option::is_none")]
    pub destination_type: Option<String>,
    /// Destination identifier.
    #[serde(rename = "destination_id", skip_serializing_if = "Option::is_none")]
    pub destination_id: Option<i32>,
    /// Source identifier.
    #[serde(rename = "source_id", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<i32>,
    /// Private key identifier.
    #[serde(rename = "private_key_id", skip_serializing_if = "Option::is_none")]
    pub private_key_id: Option<i32>,
    /// Environment identifier.
    #[serde(rename = "environment_id", skip_serializing_if = "Option::is_none")]
    pub environment_id: Option<i32>,
    /// Dockerfile content. Used for dockerfile build pack.
    #[serde(rename = "dockerfile", skip_serializing_if = "Option::is_none")]
    pub dockerfile: Option<String>,
    /// Dockerfile location.
    #[serde(rename = "dockerfile_location", skip_serializing_if = "Option::is_none")]
    pub dockerfile_location: Option<String>,
    /// Custom labels.
    #[serde(rename = "custom_labels", skip_serializing_if = "Option::is_none")]
    pub custom_labels: Option<String>,
    /// Dockerfile target build.
    #[serde(rename = "dockerfile_target_build", skip_serializing_if = "Option::is_none")]
    pub dockerfile_target_build: Option<String>,
    /// Manual webhook secret for GitHub.
    #[serde(rename = "manual_webhook_secret_github", skip_serializing_if = "Option::is_none")]
    pub manual_webhook_secret_github: Option<String>,
    /// Manual webhook secret for GitLab.
    #[serde(rename = "manual_webhook_secret_gitlab", skip_serializing_if = "Option::is_none")]
    pub manual_webhook_secret_gitlab: Option<String>,
    /// Manual webhook secret for Bitbucket.
    #[serde(rename = "manual_webhook_secret_bitbucket", skip_serializing_if = "Option::is_none")]
    pub manual_webhook_secret_bitbucket: Option<String>,
    /// Manual webhook secret for Gitea.
    #[serde(rename = "manual_webhook_secret_gitea", skip_serializing_if = "Option::is_none")]
    pub manual_webhook_secret_gitea: Option<String>,
    /// Docker compose location.
    #[serde(rename = "docker_compose_location", skip_serializing_if = "Option::is_none")]
    pub docker_compose_location: Option<String>,
    /// Docker compose content. Used for docker compose build pack.
    #[serde(rename = "docker_compose", skip_serializing_if = "Option::is_none")]
    pub docker_compose: Option<String>,
    /// Docker compose raw content.
    #[serde(rename = "docker_compose_raw", skip_serializing_if = "Option::is_none")]
    pub docker_compose_raw: Option<String>,
    /// Docker compose domains.
    #[serde(rename = "docker_compose_domains", skip_serializing_if = "Option::is_none")]
    pub docker_compose_domains: Option<String>,
    /// Docker compose custom start command.
    #[serde(rename = "docker_compose_custom_start_command", skip_serializing_if = "Option::is_none")]
    pub docker_compose_custom_start_command: Option<String>,
    /// Docker compose custom build command.
    #[serde(rename = "docker_compose_custom_build_command", skip_serializing_if = "Option::is_none")]
    pub docker_compose_custom_build_command: Option<String>,
    /// Swarm replicas. Only used for swarm deployments.
    #[serde(rename = "swarm_replicas", skip_serializing_if = "Option::is_none")]
    pub swarm_replicas: Option<i32>,
    /// Swarm placement constraints. Only used for swarm deployments.
    #[serde(rename = "swarm_placement_constraints", skip_serializing_if = "Option::is_none")]
    pub swarm_placement_constraints: Option<String>,
    /// Custom docker run options.
    #[serde(rename = "custom_docker_run_options", skip_serializing_if = "Option::is_none")]
    pub custom_docker_run_options: Option<String>,
    /// Post deployment command.
    #[serde(rename = "post_deployment_command", skip_serializing_if = "Option::is_none")]
    pub post_deployment_command: Option<String>,
    /// Post deployment command container.
    #[serde(rename = "post_deployment_command_container", skip_serializing_if = "Option::is_none")]
    pub post_deployment_command_container: Option<String>,
    /// Pre deployment command.
    #[serde(rename = "pre_deployment_command", skip_serializing_if = "Option::is_none")]
    pub pre_deployment_command: Option<String>,
    /// Pre deployment command container.
    #[serde(rename = "pre_deployment_command_container", skip_serializing_if = "Option::is_none")]
    pub pre_deployment_command_container: Option<String>,
    /// Watch paths.
    #[serde(rename = "watch_paths", skip_serializing_if = "Option::is_none")]
    pub watch_paths: Option<String>,
    /// Custom healthcheck found.
    #[serde(rename = "custom_healthcheck_found", skip_serializing_if = "Option::is_none")]
    pub custom_healthcheck_found: Option<bool>,
    /// How to set redirect with Traefik / Caddy. www<->non-www.
    #[serde(rename = "redirect", skip_serializing_if = "Option::is_none")]
    pub redirect: Option<Redirect>,
    /// The date and time when the application was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// The date and time when the application was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The date and time when the application was deleted.
    #[serde(rename = "deleted_at", skip_serializing_if = "Option::is_none")]
    pub deleted_at: Option<String>,
    /// How Coolify parse the compose file.
    #[serde(rename = "compose_parsing_version", skip_serializing_if = "Option::is_none")]
    pub compose_parsing_version: Option<String>,
    /// Custom Nginx configuration base64 encoded.
    #[serde(rename = "custom_nginx_configuration", skip_serializing_if = "Option::is_none")]
    pub custom_nginx_configuration: Option<String>,
}

impl Application {
    /// Application model
    pub fn new() -> Application {
        Application {
            id: None,
            description: None,
            repository_project_id: None,
            uuid: None,
            name: None,
            fqdn: None,
            config_hash: None,
            git_repository: None,
            git_branch: None,
            git_commit_sha: None,
            git_full_url: None,
            docker_registry_image_name: None,
            docker_registry_image_tag: None,
            build_pack: None,
            static_image: None,
            install_command: None,
            build_command: None,
            start_command: None,
            ports_exposes: None,
            ports_mappings: None,
            base_directory: None,
            publish_directory: None,
            health_check_enabled: None,
            health_check_path: None,
            health_check_port: None,
            health_check_host: None,
            health_check_method: None,
            health_check_return_code: None,
            health_check_scheme: None,
            health_check_response_text: None,
            health_check_interval: None,
            health_check_timeout: None,
            health_check_retries: None,
            health_check_start_period: None,
            limits_memory: None,
            limits_memory_swap: None,
            limits_memory_swappiness: None,
            limits_memory_reservation: None,
            limits_cpus: None,
            limits_cpuset: None,
            limits_cpu_shares: None,
            status: None,
            preview_url_template: None,
            destination_type: None,
            destination_id: None,
            source_id: None,
            private_key_id: None,
            environment_id: None,
            dockerfile: None,
            dockerfile_location: None,
            custom_labels: None,
            dockerfile_target_build: None,
            manual_webhook_secret_github: None,
            manual_webhook_secret_gitlab: None,
            manual_webhook_secret_bitbucket: None,
            manual_webhook_secret_gitea: None,
            docker_compose_location: None,
            docker_compose: None,
            docker_compose_raw: None,
            docker_compose_domains: None,
            docker_compose_custom_start_command: None,
            docker_compose_custom_build_command: None,
            swarm_replicas: None,
            swarm_placement_constraints: None,
            custom_docker_run_options: None,
            post_deployment_command: None,
            post_deployment_command_container: None,
            pre_deployment_command: None,
            pre_deployment_command_container: None,
            watch_paths: None,
            custom_healthcheck_found: None,
            redirect: None,
            created_at: None,
            updated_at: None,
            deleted_at: None,
            compose_parsing_version: None,
            custom_nginx_configuration: None,
        }
    }
}
/// Build pack.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BuildPack {
    #[serde(rename = "nixpacks")]
    Nixpacks,
    #[serde(rename = "static")]
    Static,
    #[serde(rename = "dockerfile")]
    Dockerfile,
    #[serde(rename = "dockercompose")]
    Dockercompose,
}

impl Default for BuildPack {
    fn default() -> BuildPack {
        Self::Nixpacks
    }
}
/// How to set redirect with Traefik / Caddy. www<->non-www.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Redirect {
    #[serde(rename = "www")]
    Www,
    #[serde(rename = "non-www")]
    NonWww,
    #[serde(rename = "both")]
    Both,
}

impl Default for Redirect {
    fn default() -> Redirect {
        Self::Www
    }
}

