/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ServerSetting : Server Settings model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServerSetting {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "concurrent_builds", skip_serializing_if = "Option::is_none")]
    pub concurrent_builds: Option<i32>,
    #[serde(rename = "dynamic_timeout", skip_serializing_if = "Option::is_none")]
    pub dynamic_timeout: Option<i32>,
    #[serde(rename = "force_disabled", skip_serializing_if = "Option::is_none")]
    pub force_disabled: Option<bool>,
    #[serde(rename = "force_server_cleanup", skip_serializing_if = "Option::is_none")]
    pub force_server_cleanup: Option<bool>,
    #[serde(rename = "is_build_server", skip_serializing_if = "Option::is_none")]
    pub is_build_server: Option<bool>,
    #[serde(rename = "is_cloudflare_tunnel", skip_serializing_if = "Option::is_none")]
    pub is_cloudflare_tunnel: Option<bool>,
    #[serde(rename = "is_jump_server", skip_serializing_if = "Option::is_none")]
    pub is_jump_server: Option<bool>,
    #[serde(rename = "is_logdrain_axiom_enabled", skip_serializing_if = "Option::is_none")]
    pub is_logdrain_axiom_enabled: Option<bool>,
    #[serde(rename = "is_logdrain_custom_enabled", skip_serializing_if = "Option::is_none")]
    pub is_logdrain_custom_enabled: Option<bool>,
    #[serde(rename = "is_logdrain_highlight_enabled", skip_serializing_if = "Option::is_none")]
    pub is_logdrain_highlight_enabled: Option<bool>,
    #[serde(rename = "is_logdrain_newrelic_enabled", skip_serializing_if = "Option::is_none")]
    pub is_logdrain_newrelic_enabled: Option<bool>,
    #[serde(rename = "is_metrics_enabled", skip_serializing_if = "Option::is_none")]
    pub is_metrics_enabled: Option<bool>,
    #[serde(rename = "is_reachable", skip_serializing_if = "Option::is_none")]
    pub is_reachable: Option<bool>,
    #[serde(rename = "is_sentinel_enabled", skip_serializing_if = "Option::is_none")]
    pub is_sentinel_enabled: Option<bool>,
    #[serde(rename = "is_swarm_manager", skip_serializing_if = "Option::is_none")]
    pub is_swarm_manager: Option<bool>,
    #[serde(rename = "is_swarm_worker", skip_serializing_if = "Option::is_none")]
    pub is_swarm_worker: Option<bool>,
    #[serde(rename = "is_usable", skip_serializing_if = "Option::is_none")]
    pub is_usable: Option<bool>,
    #[serde(rename = "logdrain_axiom_api_key", skip_serializing_if = "Option::is_none")]
    pub logdrain_axiom_api_key: Option<String>,
    #[serde(rename = "logdrain_axiom_dataset_name", skip_serializing_if = "Option::is_none")]
    pub logdrain_axiom_dataset_name: Option<String>,
    #[serde(rename = "logdrain_custom_config", skip_serializing_if = "Option::is_none")]
    pub logdrain_custom_config: Option<String>,
    #[serde(rename = "logdrain_custom_config_parser", skip_serializing_if = "Option::is_none")]
    pub logdrain_custom_config_parser: Option<String>,
    #[serde(rename = "logdrain_highlight_project_id", skip_serializing_if = "Option::is_none")]
    pub logdrain_highlight_project_id: Option<String>,
    #[serde(rename = "logdrain_newrelic_base_uri", skip_serializing_if = "Option::is_none")]
    pub logdrain_newrelic_base_uri: Option<String>,
    #[serde(rename = "logdrain_newrelic_license_key", skip_serializing_if = "Option::is_none")]
    pub logdrain_newrelic_license_key: Option<String>,
    #[serde(rename = "sentinel_metrics_history_days", skip_serializing_if = "Option::is_none")]
    pub sentinel_metrics_history_days: Option<i32>,
    #[serde(rename = "sentinel_metrics_refresh_rate_seconds", skip_serializing_if = "Option::is_none")]
    pub sentinel_metrics_refresh_rate_seconds: Option<i32>,
    #[serde(rename = "sentinel_token", skip_serializing_if = "Option::is_none")]
    pub sentinel_token: Option<String>,
    #[serde(rename = "docker_cleanup_frequency", skip_serializing_if = "Option::is_none")]
    pub docker_cleanup_frequency: Option<String>,
    #[serde(rename = "docker_cleanup_threshold", skip_serializing_if = "Option::is_none")]
    pub docker_cleanup_threshold: Option<i32>,
    #[serde(rename = "server_id", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<i32>,
    #[serde(rename = "wildcard_domain", skip_serializing_if = "Option::is_none")]
    pub wildcard_domain: Option<String>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl ServerSetting {
    /// Server Settings model
    pub fn new() -> ServerSetting {
        ServerSetting {
            id: None,
            concurrent_builds: None,
            dynamic_timeout: None,
            force_disabled: None,
            force_server_cleanup: None,
            is_build_server: None,
            is_cloudflare_tunnel: None,
            is_jump_server: None,
            is_logdrain_axiom_enabled: None,
            is_logdrain_custom_enabled: None,
            is_logdrain_highlight_enabled: None,
            is_logdrain_newrelic_enabled: None,
            is_metrics_enabled: None,
            is_reachable: None,
            is_sentinel_enabled: None,
            is_swarm_manager: None,
            is_swarm_worker: None,
            is_usable: None,
            logdrain_axiom_api_key: None,
            logdrain_axiom_dataset_name: None,
            logdrain_custom_config: None,
            logdrain_custom_config_parser: None,
            logdrain_highlight_project_id: None,
            logdrain_newrelic_base_uri: None,
            logdrain_newrelic_license_key: None,
            sentinel_metrics_history_days: None,
            sentinel_metrics_refresh_rate_seconds: None,
            sentinel_token: None,
            docker_cleanup_frequency: None,
            docker_cleanup_threshold: None,
            server_id: None,
            wildcard_domain: None,
            created_at: None,
            updated_at: None,
        }
    }
}

