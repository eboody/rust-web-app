/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Server : Server model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Server {
	/// The server ID.
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<i32>,
	/// The server UUID.
	#[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
	pub uuid: Option<String>,
	/// The server name.
	#[serde(rename = "name", skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The server description.
	#[serde(rename = "description", skip_serializing_if = "Option::is_none")]
	pub description: Option<String>,
	/// The IP address.
	#[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
	pub ip: Option<String>,
	/// The user.
	#[serde(rename = "user", skip_serializing_if = "Option::is_none")]
	pub user: Option<String>,
	/// The port number.
	#[serde(rename = "port", skip_serializing_if = "Option::is_none")]
	pub port: Option<i32>,
	/// The proxy configuration.
	#[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
	pub proxy: Option<json::Value>,
	/// The proxy type.
	#[serde(rename = "proxy_type", skip_serializing_if = "Option::is_none")]
	pub proxy_type: Option<ProxyType>,
	/// The flag to indicate if the high disk usage notification has been sent.
	#[serde(
		rename = "high_disk_usage_notification_sent",
		skip_serializing_if = "Option::is_none"
	)]
	pub high_disk_usage_notification_sent: Option<bool>,
	/// The flag to indicate if the unreachable notification has been sent.
	#[serde(
		rename = "unreachable_notification_sent",
		skip_serializing_if = "Option::is_none"
	)]
	pub unreachable_notification_sent: Option<bool>,
	/// The unreachable count for your server.
	#[serde(rename = "unreachable_count", skip_serializing_if = "Option::is_none")]
	pub unreachable_count: Option<i32>,
	/// The validation logs.
	#[serde(rename = "validation_logs", skip_serializing_if = "Option::is_none")]
	pub validation_logs: Option<String>,
	/// The flag to indicate if the log drain notification has been sent.
	#[serde(
		rename = "log_drain_notification_sent",
		skip_serializing_if = "Option::is_none"
	)]
	pub log_drain_notification_sent: Option<bool>,
	/// The swarm cluster configuration.
	#[serde(rename = "swarm_cluster", skip_serializing_if = "Option::is_none")]
	pub swarm_cluster: Option<String>,
	/// The flag to indicate if the unused volumes should be deleted.
	#[serde(
		rename = "delete_unused_volumes",
		skip_serializing_if = "Option::is_none"
	)]
	pub delete_unused_volumes: Option<bool>,
	/// The flag to indicate if the unused networks should be deleted.
	#[serde(
		rename = "delete_unused_networks",
		skip_serializing_if = "Option::is_none"
	)]
	pub delete_unused_networks: Option<bool>,
}

impl Server {
	/// Server model
	pub fn new() -> Server {
		Server {
			id: None,
			uuid: None,
			name: None,
			description: None,
			ip: None,
			user: None,
			port: None,
			proxy: None,
			proxy_type: None,
			high_disk_usage_notification_sent: None,
			unreachable_notification_sent: None,
			unreachable_count: None,
			validation_logs: None,
			log_drain_notification_sent: None,
			swarm_cluster: None,
			delete_unused_volumes: None,
			delete_unused_networks: None,
		}
	}
}
/// The proxy type.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum ProxyType {
	#[serde(rename = "traefik")]
	Traefik,
	#[serde(rename = "caddy")]
	Caddy,
	#[serde(rename = "none")]
	None,
}

impl Default for ProxyType {
	fn default() -> ProxyType {
		Self::Traefik
	}
}
