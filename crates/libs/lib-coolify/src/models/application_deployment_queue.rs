/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ApplicationDeploymentQueue : Project model
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationDeploymentQueue {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "application_id", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<String>,
    #[serde(rename = "deployment_uuid", skip_serializing_if = "Option::is_none")]
    pub deployment_uuid: Option<String>,
    #[serde(rename = "pull_request_id", skip_serializing_if = "Option::is_none")]
    pub pull_request_id: Option<i32>,
    #[serde(rename = "force_rebuild", skip_serializing_if = "Option::is_none")]
    pub force_rebuild: Option<bool>,
    #[serde(rename = "commit", skip_serializing_if = "Option::is_none")]
    pub commit: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "is_webhook", skip_serializing_if = "Option::is_none")]
    pub is_webhook: Option<bool>,
    #[serde(rename = "is_api", skip_serializing_if = "Option::is_none")]
    pub is_api: Option<bool>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    pub logs: Option<String>,
    #[serde(rename = "current_process_id", skip_serializing_if = "Option::is_none")]
    pub current_process_id: Option<String>,
    #[serde(rename = "restart_only", skip_serializing_if = "Option::is_none")]
    pub restart_only: Option<bool>,
    #[serde(rename = "git_type", skip_serializing_if = "Option::is_none")]
    pub git_type: Option<String>,
    #[serde(rename = "server_id", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<i32>,
    #[serde(rename = "application_name", skip_serializing_if = "Option::is_none")]
    pub application_name: Option<String>,
    #[serde(rename = "server_name", skip_serializing_if = "Option::is_none")]
    pub server_name: Option<String>,
    #[serde(rename = "deployment_url", skip_serializing_if = "Option::is_none")]
    pub deployment_url: Option<String>,
    #[serde(rename = "destination_id", skip_serializing_if = "Option::is_none")]
    pub destination_id: Option<String>,
    #[serde(rename = "only_this_server", skip_serializing_if = "Option::is_none")]
    pub only_this_server: Option<bool>,
    #[serde(rename = "rollback", skip_serializing_if = "Option::is_none")]
    pub rollback: Option<bool>,
    #[serde(rename = "commit_message", skip_serializing_if = "Option::is_none")]
    pub commit_message: Option<String>,
}

impl ApplicationDeploymentQueue {
    /// Project model
    pub fn new() -> ApplicationDeploymentQueue {
        ApplicationDeploymentQueue {
            id: None,
            application_id: None,
            deployment_uuid: None,
            pull_request_id: None,
            force_rebuild: None,
            commit: None,
            status: None,
            is_webhook: None,
            is_api: None,
            created_at: None,
            updated_at: None,
            logs: None,
            current_process_id: None,
            restart_only: None,
            git_type: None,
            server_id: None,
            application_name: None,
            server_name: None,
            deployment_url: None,
            destination_id: None,
            only_this_server: None,
            rollback: None,
            commit_message: None,
        }
    }
}

