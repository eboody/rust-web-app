/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait ServicesApi: Send + Sync {
    async fn create_env_by_service_uuid<'uuid, 'create_env_by_application_uuid_request>(&self, uuid: &str, create_env_by_application_uuid_request: models::CreateEnvByApplicationUuidRequest) -> Result<models::CreateEnvByApplicationUuid201Response, Error<CreateEnvByServiceUuidError>>;
    async fn create_service<'create_service_request>(&self, create_service_request: models::CreateServiceRequest) -> Result<models::CreateService201Response, Error<CreateServiceError>>;
    async fn delete_env_by_service_uuid<'uuid, 'env_uuid>(&self, uuid: &str, env_uuid: &str) -> Result<models::DeleteEnvByApplicationUuid200Response, Error<DeleteEnvByServiceUuidError>>;
    async fn delete_service_by_uuid<'uuid, 'delete_configurations, 'delete_volumes, 'docker_cleanup, 'delete_connected_networks>(&self, uuid: &'uuid str, delete_configurations: Option<bool>, delete_volumes: Option<bool>, docker_cleanup: Option<bool>, delete_connected_networks: Option<bool>) -> Result<models::DeleteServiceByUuid200Response, Error<DeleteServiceByUuidError>>;
    async fn get_service_by_uuid<'uuid>(&self, uuid: &'uuid str) -> Result<models::Service, Error<GetServiceByUuidError>>;
    async fn list_envs_by_service_uuid<'uuid>(&self, uuid: &str) -> Result<Vec<models::EnvironmentVariable>, Error<ListEnvsByServiceUuidError>>;
    async fn list_services<>(&self, ) -> Result<Vec<models::Service>, Error<ListServicesError>>;
    async fn restart_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::RestartServiceByUuid200Response, Error<RestartServiceByUuidError>>;
    async fn start_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::StartServiceByUuid200Response, Error<StartServiceByUuidError>>;
    async fn stop_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::StopServiceByUuid200Response, Error<StopServiceByUuidError>>;
    async fn update_env_by_service_uuid<'uuid, 'update_env_by_application_uuid_request>(&self, uuid: &str, update_env_by_application_uuid_request: models::UpdateEnvByApplicationUuidRequest) -> Result<models::UpdateEnvByApplicationUuid201Response, Error<UpdateEnvByServiceUuidError>>;
    async fn update_envs_by_service_uuid<'uuid, 'update_envs_by_application_uuid_request>(&self, uuid: &str, update_envs_by_application_uuid_request: models::UpdateEnvsByApplicationUuidRequest) -> Result<models::UpdateEnvsByApplicationUuid201Response, Error<UpdateEnvsByServiceUuidError>>;
}

pub struct ServicesApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ServicesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}



#[async_trait]
impl ServicesApi for ServicesApiClient {
    /// Create env by service UUID.
    async fn create_env_by_service_uuid<'uuid, 'create_env_by_application_uuid_request>(&self, uuid: &str, create_env_by_application_uuid_request: models::CreateEnvByApplicationUuidRequest) -> Result<models::CreateEnvByApplicationUuid201Response, Error<CreateEnvByServiceUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/envs", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&create_env_by_application_uuid_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<CreateEnvByServiceUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a one-click service
    async fn create_service<'create_service_request>(&self, create_service_request: models::CreateServiceRequest) -> Result<models::CreateService201Response, Error<CreateServiceError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&create_service_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<CreateServiceError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete env by UUID.
    async fn delete_env_by_service_uuid<'uuid, 'env_uuid>(&self, uuid: &str, env_uuid: &str) -> Result<models::DeleteEnvByApplicationUuid200Response, Error<DeleteEnvByServiceUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/envs/{env_uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid), env_uuid=crate::apis::urlencode(env_uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<DeleteEnvByServiceUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete service by UUID.
    async fn delete_service_by_uuid<'uuid, 'delete_configurations, 'delete_volumes, 'docker_cleanup, 'delete_connected_networks>(&self, uuid: &'uuid str, delete_configurations: Option<bool>, delete_volumes: Option<bool>, docker_cleanup: Option<bool>, delete_connected_networks: Option<bool>) -> Result<models::DeleteServiceByUuid200Response, Error<DeleteServiceByUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = delete_configurations {
            local_var_req_builder = local_var_req_builder.query(&[("delete_configurations", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = delete_volumes {
            local_var_req_builder = local_var_req_builder.query(&[("delete_volumes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = docker_cleanup {
            local_var_req_builder = local_var_req_builder.query(&[("docker_cleanup", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = delete_connected_networks {
            local_var_req_builder = local_var_req_builder.query(&[("delete_connected_networks", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<DeleteServiceByUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get service by UUID.
    async fn get_service_by_uuid<'uuid>(&self, uuid: &'uuid str) -> Result<models::Service, Error<GetServiceByUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetServiceByUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// List all envs by service UUID.
    async fn list_envs_by_service_uuid<'uuid>(&self, uuid: &str) -> Result<Vec<models::EnvironmentVariable>, Error<ListEnvsByServiceUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/envs", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ListEnvsByServiceUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// List all services.
    async fn list_services<>(&self, ) -> Result<Vec<models::Service>, Error<ListServicesError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ListServicesError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Restart service. `Post` request is also accepted.
    async fn restart_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::RestartServiceByUuid200Response, Error<RestartServiceByUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/restart", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<RestartServiceByUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Start service. `Post` request is also accepted.
    async fn start_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::StartServiceByUuid200Response, Error<StartServiceByUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/start", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<StartServiceByUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Stop service. `Post` request is also accepted.
    async fn stop_service_by_uuid<'uuid>(&self, uuid: &str) -> Result<models::StopServiceByUuid200Response, Error<StopServiceByUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/stop", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<StopServiceByUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Update env by service UUID.
    async fn update_env_by_service_uuid<'uuid, 'update_env_by_application_uuid_request>(&self, uuid: &str, update_env_by_application_uuid_request: models::UpdateEnvByApplicationUuidRequest) -> Result<models::UpdateEnvByApplicationUuid201Response, Error<UpdateEnvByServiceUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/envs", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&update_env_by_application_uuid_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<UpdateEnvByServiceUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Update multiple envs by service UUID.
    async fn update_envs_by_service_uuid<'uuid, 'update_envs_by_application_uuid_request>(&self, uuid: &str, update_envs_by_application_uuid_request: models::UpdateEnvsByApplicationUuidRequest) -> Result<models::UpdateEnvsByApplicationUuid201Response, Error<UpdateEnvsByServiceUuidError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/services/{uuid}/envs/bulk", local_var_configuration.base_path, uuid=crate::apis::urlencode(uuid));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&update_envs_by_application_uuid_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<UpdateEnvsByServiceUuidError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`create_env_by_service_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateEnvByServiceUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_service`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateServiceError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_env_by_service_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteEnvByServiceUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_service_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteServiceByUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_service_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetServiceByUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_envs_by_service_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEnvsByServiceUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_services`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListServicesError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`restart_service_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RestartServiceByUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`start_service_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StartServiceByUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stop_service_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopServiceByUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_env_by_service_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateEnvByServiceUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_envs_by_service_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateEnvsByServiceUuidError {
    Status401(models::InlineObject1),
    Status400(models::InlineObject),
    Status404(models::InlineObject2),
    UnknownValue(serde_json::Value),
}

