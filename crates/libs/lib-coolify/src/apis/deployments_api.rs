/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait DeploymentsApi: Send + Sync {
	async fn deploy_by_tag_or_uuid<'tag, 'uuid, 'force>(
		&self,
		tag: Option<&'tag str>,
		uuid: Option<&'uuid str>,
		force: Option<bool>,
	) -> Result<models::DeployByTagOrUuid200Response, Error<DeployByTagOrUuidError>>;
	async fn get_deployment_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<models::ApplicationDeploymentQueue, Error<GetDeploymentByUuidError>>;
	async fn list_deployments(
		&self,
	) -> Result<Vec<models::ApplicationDeploymentQueue>, Error<ListDeploymentsError>>;
}

pub struct DeploymentsApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl DeploymentsApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

#[async_trait]
impl DeploymentsApi for DeploymentsApiClient {
	/// Deploy by tag or uuid. `Post` request also accepted.
	async fn deploy_by_tag_or_uuid<'tag, 'uuid, 'force>(
		&self,
		tag: Option<&'tag str>,
		uuid: Option<&'uuid str>,
		force: Option<bool>,
	) -> Result<models::DeployByTagOrUuid200Response, Error<DeployByTagOrUuidError>>
	{
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/deploy", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_str) = tag {
			local_var_req_builder =
				local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = uuid {
			local_var_req_builder =
				local_var_req_builder.query(&[("uuid", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = force {
			local_var_req_builder = local_var_req_builder
				.query(&[("force", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeployByTagOrUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get deployment by UUID.
	async fn get_deployment_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<models::ApplicationDeploymentQueue, Error<GetDeploymentByUuidError>>
	{
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/deployments/{uuid}",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetDeploymentByUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// List currently running deployments
	async fn list_deployments(
		&self,
	) -> Result<Vec<models::ApplicationDeploymentQueue>, Error<ListDeploymentsError>>
	{
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/deployments", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<ListDeploymentsError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`deploy_by_tag_or_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeployByTagOrUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`get_deployment_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeploymentByUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`list_deployments`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListDeploymentsError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	UnknownValue(json::Value),
}
