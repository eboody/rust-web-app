/*
 * Coolify
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait ServersApi: Send + Sync {
	async fn create_server<'create_server_request>(
		&self,
		create_server_request: models::CreateServerRequest,
	) -> Result<models::CreateServer201Response, Error<CreateServerError>>;
	async fn delete_server_by_uuid<'uuid>(
		&self,
		uuid: &str,
	) -> Result<models::DeleteServerByUuid200Response, Error<DeleteServerByUuidError>>;
	async fn get_domains_by_server_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		Vec<models::GetDomainsByServerUuid200ResponseInner>,
		Error<GetDomainsByServerUuidError>,
	>;
	async fn get_resources_by_server_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		Vec<models::GetResourcesByServerUuid200ResponseInner>,
		Error<GetResourcesByServerUuidError>,
	>;
	async fn get_server_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<models::Server, Error<GetServerByUuidError>>;
	async fn list_servers(
		&self,
	) -> Result<Vec<models::Server>, Error<ListServersError>>;
	async fn update_server_by_uuid<'update_server_by_uuid_request>(
		&self,
		update_server_by_uuid_request: models::UpdateServerByUuidRequest,
	) -> Result<Vec<models::Server>, Error<UpdateServerByUuidError>>;
	async fn validate_server_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		models::ValidateServerByUuid201Response,
		Error<ValidateServerByUuidError>,
	>;
}

pub struct ServersApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl ServersApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

#[async_trait]
impl ServersApi for ServersApiClient {
	/// Create Server.
	async fn create_server<'create_server_request>(
		&self,
		create_server_request: models::CreateServerRequest,
	) -> Result<models::CreateServer201Response, Error<CreateServerError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/servers", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder = local_var_req_builder.json(&create_server_request);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<CreateServerError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Delete server by UUID.
	async fn delete_server_by_uuid<'uuid>(
		&self,
		uuid: &str,
	) -> Result<models::DeleteServerByUuid200Response, Error<DeleteServerByUuidError>>
	{
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/servers/{uuid}",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<DeleteServerByUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get domains by server.
	async fn get_domains_by_server_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		Vec<models::GetDomainsByServerUuid200ResponseInner>,
		Error<GetDomainsByServerUuidError>,
	> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/servers/{uuid}/domains",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetDomainsByServerUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get resources by server.
	async fn get_resources_by_server_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		Vec<models::GetResourcesByServerUuid200ResponseInner>,
		Error<GetResourcesByServerUuidError>,
	> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/servers/{uuid}/resources",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetResourcesByServerUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get server by UUID.
	async fn get_server_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<models::Server, Error<GetServerByUuidError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/servers/{uuid}",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetServerByUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// List all servers.
	async fn list_servers(
		&self,
	) -> Result<Vec<models::Server>, Error<ListServersError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/servers", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<ListServersError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Update Server.
	async fn update_server_by_uuid<'update_server_by_uuid_request>(
		&self,
		update_server_by_uuid_request: models::UpdateServerByUuidRequest,
	) -> Result<Vec<models::Server>, Error<UpdateServerByUuidError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/servers/{uuid}", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder =
			local_var_req_builder.json(&update_server_by_uuid_request);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<UpdateServerByUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Validate server by UUID.
	async fn validate_server_by_uuid<'uuid>(
		&self,
		uuid: &'uuid str,
	) -> Result<
		models::ValidateServerByUuid201Response,
		Error<ValidateServerByUuidError>,
	> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/servers/{uuid}/validate",
			local_var_configuration.base_path,
			uuid = crate::apis::urlencode(uuid)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<ValidateServerByUuidError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`create_server`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateServerError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`delete_server_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteServerByUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`get_domains_by_server_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDomainsByServerUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`get_resources_by_server_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetResourcesByServerUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`get_server_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetServerByUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`list_servers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListServersError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`update_server_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateServerByUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`validate_server_by_uuid`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ValidateServerByUuidError {
	Status401(models::InlineObject1),
	Status400(models::InlineObject),
	Status404(models::InlineObject2),
	UnknownValue(json::Value),
}
