/*
 * AnythingLLM Developer API
 *
 * API endpoints that enable programmatic reading, writing, and updating of your AnythingLLM instance. UI supplied by Swagger.io.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{Error, configuration};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait DocumentsApi: Send + Sync {
	async fn v1_document_accepted_file_types_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentAcceptedFileTypesGetError>>;
	async fn v1_document_create_folder_post<'body>(
		&self,
		body: &'body str,
	) -> Result<json::Value, Error<V1DocumentCreateFolderPostError>>;
	async fn v1_document_doc_name_get<'doc_name>(
		&self,
		doc_name: &'doc_name str,
	) -> Result<json::Value, Error<V1DocumentDocNameGetError>>;
	async fn v1_document_metadata_schema_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentMetadataSchemaGetError>>;
	async fn v1_document_move_files_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentMoveFilesPostError>>;
	async fn v1_document_raw_text_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentRawTextPostError>>;
	async fn v1_document_upload_link_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentUploadLinkPostError>>;
	async fn v1_document_upload_post<'file>(
		&self,
		file: Option<std::path::PathBuf>,
	) -> Result<json::Value, Error<V1DocumentUploadPostError>>;
	async fn v1_documents_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentsGetError>>;
}

pub struct DocumentsApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl DocumentsApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

#[async_trait]
impl DocumentsApi for DocumentsApiClient {
	/// Check available filetypes and MIMEs that can be uploaded.
	async fn v1_document_accepted_file_types_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentAcceptedFileTypesGetError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/accepted-file-types",
			local_var_configuration.base_path
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentAcceptedFileTypesGetError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Create a new folder inside the documents storage directory.
	async fn v1_document_create_folder_post<'body>(
		&self,
		body: &'body str,
	) -> Result<json::Value, Error<V1DocumentCreateFolderPostError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/create-folder",
			local_var_configuration.base_path
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder = local_var_req_builder.json(&body);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentCreateFolderPostError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get a single document by its unique AnythingLLM document name
	async fn v1_document_doc_name_get<'doc_name>(
		&self,
		doc_name: &'doc_name str,
	) -> Result<json::Value, Error<V1DocumentDocNameGetError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/{docName}",
			local_var_configuration.base_path,
			docName = crate::apis::urlencode(doc_name)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentDocNameGetError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Get the known available metadata schema for when doing a raw-text upload and the acceptable type of value for each key.
	async fn v1_document_metadata_schema_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentMetadataSchemaGetError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/metadata-schema",
			local_var_configuration.base_path
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentMetadataSchemaGetError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Move files within the documents storage directory.
	async fn v1_document_move_files_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentMoveFilesPostError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/move-files",
			local_var_configuration.base_path
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder = local_var_req_builder.json(&body);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentMoveFilesPostError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Upload a file by specifying its raw text content and metadata values without having to upload a file.
	async fn v1_document_raw_text_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentRawTextPostError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/v1/document/raw-text", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder = local_var_req_builder.json(&body);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentRawTextPostError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Upload a valid URL for AnythingLLM to scrape and prepare for embedding.
	async fn v1_document_upload_link_post<'body>(
		&self,
		body: json::Value,
	) -> Result<json::Value, Error<V1DocumentUploadLinkPostError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/v1/document/upload-link",
			local_var_configuration.base_path
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		local_var_req_builder = local_var_req_builder.json(&body);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentUploadLinkPostError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// Upload a new file to AnythingLLM to be parsed and prepared for embedding.
	async fn v1_document_upload_post<'file>(
		&self,
		file: Option<std::path::PathBuf>,
	) -> Result<json::Value, Error<V1DocumentUploadPostError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/v1/document/upload", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::POST, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};
		let local_var_form = reqwest::multipart::Form::new();
		// TODO: support file upload for 'file' parameter
		local_var_req_builder = local_var_req_builder.multipart(local_var_form);

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentUploadPostError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}

	/// List of all locally-stored documents in instance
	async fn v1_documents_get(
		&self,
	) -> Result<json::Value, Error<V1DocumentsGetError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str =
			format!("{}/v1/documents", local_var_configuration.base_path);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}
		if let Some(ref local_var_token) =
			local_var_configuration.bearer_access_token
		{
			local_var_req_builder =
				local_var_req_builder.bearer_auth(local_var_token.to_owned());
		};

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<V1DocumentsGetError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`v1_document_accepted_file_types_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentAcceptedFileTypesGetError {
	Status403(models::InvalidApiKey),
	Status404(),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_create_folder_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentCreateFolderPostError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_doc_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentDocNameGetError {
	Status403(models::InvalidApiKey),
	Status404(),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_metadata_schema_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentMetadataSchemaGetError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_move_files_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentMoveFilesPostError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_raw_text_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentRawTextPostError {
	Status403(models::InvalidApiKey),
	Status422(),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_upload_link_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentUploadLinkPostError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_document_upload_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentUploadPostError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}

/// struct for typed errors of method [`v1_documents_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum V1DocumentsGetError {
	Status403(models::InvalidApiKey),
	Status500(),
	UnknownValue(json::Value),
}
