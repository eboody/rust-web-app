/*
 * Stirling PDF API
 *
 * API documentation for all Server-Side processing. Please note some functionality might be UI only and missing from here.
 *
 * The version of the OpenAPI document: 0.34.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait FilterApi: Send + Sync {
    async fn contains_image<'file_input, 'page_numbers>(&self, file_input: Option<std::path::PathBuf>, page_numbers: Option<&'page_numbers str>) -> Result<Vec<String>, Error<ContainsImageError>>;
    async fn contains_text<'text, 'file_input, 'page_numbers>(&self, text: &'text str, file_input: Option<std::path::PathBuf>, page_numbers: Option<&'page_numbers str>) -> Result<Vec<String>, Error<ContainsTextError>>;
    async fn file_size<'file_size, 'file_input, 'comparator>(&self, file_size: &'file_size str, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<FileSizeError>>;
    async fn page_count<'file_input, 'comparator, 'page_count>(&self, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>, page_count: Option<&'page_count str>) -> Result<Vec<String>, Error<PageCountError>>;
    async fn page_rotation<'rotation, 'file_input, 'comparator>(&self, rotation: i32, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<PageRotationError>>;
    async fn page_size<'standard_page_size, 'file_input, 'comparator>(&self, standard_page_size: &'standard_page_size str, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<PageSizeError>>;
}

pub struct FilterApiClient {
    configuration: Arc<configuration::Configuration>
}

impl FilterApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}



#[async_trait]
impl FilterApi for FilterApiClient {
    /// Input:PDF Output:Boolean Type:SISO
    async fn contains_image<'file_input, 'page_numbers>(&self, file_input: Option<std::path::PathBuf>, page_numbers: Option<&'page_numbers str>) -> Result<Vec<String>, Error<ContainsImageError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-contains-image", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = page_numbers {
            local_var_form = local_var_form.text("pageNumbers", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContainsImageError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Input:PDF Output:Boolean Type:SISO
    async fn contains_text<'text, 'file_input, 'page_numbers>(&self, text: &'text str, file_input: Option<std::path::PathBuf>, page_numbers: Option<&'page_numbers str>) -> Result<Vec<String>, Error<ContainsTextError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-contains-text", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = page_numbers {
            local_var_form = local_var_form.text("pageNumbers", local_var_param_value.to_string());
        }
        local_var_form = local_var_form.text("text", text.to_string());
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContainsTextError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Input:PDF Output:Boolean Type:SISO
    async fn file_size<'file_size, 'file_input, 'comparator>(&self, file_size: &'file_size str, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<FileSizeError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-file-size", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = comparator {
            local_var_form = local_var_form.text("comparator", local_var_param_value.to_string());
        }
        local_var_form = local_var_form.text("fileSize", file_size.to_string());
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<FileSizeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Input:PDF Output:Boolean Type:SISO
    async fn page_count<'file_input, 'comparator, 'page_count>(&self, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>, page_count: Option<&'page_count str>) -> Result<Vec<String>, Error<PageCountError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-page-count", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = comparator {
            local_var_form = local_var_form.text("comparator", local_var_param_value.to_string());
        }
        if let Some(local_var_param_value) = page_count {
            local_var_form = local_var_form.text("pageCount", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PageCountError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Input:PDF Output:Boolean Type:SISO
    async fn page_rotation<'rotation, 'file_input, 'comparator>(&self, rotation: i32, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<PageRotationError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-page-rotation", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = comparator {
            local_var_form = local_var_form.text("comparator", local_var_param_value.to_string());
        }
        local_var_form = local_var_form.text("rotation", rotation.to_string());
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PageRotationError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Input:PDF Output:Boolean Type:SISO
    async fn page_size<'standard_page_size, 'file_input, 'comparator>(&self, standard_page_size: &'standard_page_size str, file_input: Option<std::path::PathBuf>, comparator: Option<&'comparator str>) -> Result<Vec<String>, Error<PageSizeError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/api/v1/filter/filter-page-size", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        let mut local_var_form = reqwest::multipart::Form::new();
        // TODO: support file upload for 'fileInput' parameter
        if let Some(local_var_param_value) = comparator {
            local_var_form = local_var_form.text("comparator", local_var_param_value.to_string());
        }
        local_var_form = local_var_form.text("standardPageSize", standard_page_size.to_string());
        local_var_req_builder = local_var_req_builder.multipart(local_var_form);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PageSizeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`contains_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContainsImageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contains_text`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContainsTextError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`file_size`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FileSizeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`page_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PageCountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`page_rotation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PageRotationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`page_size`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PageSizeError {
    UnknownValue(serde_json::Value),
}

