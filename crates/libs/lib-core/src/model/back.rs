// autogenerated using pg2rs
use ormlite::Model;
use postgres::row::Row;
use postgres::types::{FromSql, ToSql};
use serde_json::Value;
use uuid::Uuid;
type Json = Value;

#[derive(Debug, sqlx::Type, Model)]
pub struct Articles {
	pub id: Uuid,
	pub status: String,
	pub sort: Option<i32>,
	pub user_created: Option<Uuid>,
	pub date_created: Option<String>,
	pub user_updated: Option<Uuid>,
	pub date_updated: Option<String>,
	pub image: Option<Uuid>,
	pub author: Option<Uuid>,
	pub thing: Json,
}

impl From<Row> for Articles {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			status: row.get("status"),
			sort: row.get("sort"),
			user_created: row.get("user_created"),
			date_created: row.get("date_created"),
			user_updated: row.get("user_updated"),
			date_updated: row.get("date_updated"),
			image: row.get("image"),
			author: row.get("author"),
			thing: row.get("thing"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct ArticlesTranslations {
	pub id: i32,
	pub articles_id: Option<Uuid>,
	pub languages_code: Option<String>,
	pub title: Option<String>,
	pub slug: Option<String>,
	pub summary: Option<String>,
	pub content: Option<String>,
}

impl From<Row> for ArticlesTranslations {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			articles_id: row.get("articles_id"),
			languages_code: row.get("languages_code"),
			title: row.get("title"),
			slug: row.get("slug"),
			summary: row.get("summary"),
			content: row.get("content"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusAccess {
	pub id: Uuid,
	pub role: Option<Uuid>,
	pub user: Option<Uuid>,
	pub policy: Uuid,
	pub sort: Option<i32>,
}

impl From<Row> for DirectusAccess {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			role: row.get("role"),
			user: row.get("user"),
			policy: row.get("policy"),
			sort: row.get("sort"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusActivity {
	pub id: i32,
	pub action: String,
	pub user: Option<Uuid>,
	pub timestamp: String,
	pub ip: Option<String>,
	pub user_agent: Option<String>,
	pub collection: String,
	pub item: String,
	pub comment: Option<String>,
	pub origin: Option<String>,
}

impl From<Row> for DirectusActivity {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			action: row.get("action"),
			user: row.get("user"),
			timestamp: row.get("timestamp"),
			ip: row.get("ip"),
			user_agent: row.get("user_agent"),
			collection: row.get("collection"),
			item: row.get("item"),
			comment: row.get("comment"),
			origin: row.get("origin"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusCollections {
	#[ormlite(primary_key)]
	pub collection: String,
	pub icon: Option<String>,
	pub note: Option<String>,
	pub display_template: Option<String>,
	pub hidden: bool,
	pub singleton: bool,

	pub archive_field: Option<String>,
	pub archive_app_filter: bool,
	pub archive_value: Option<String>,
	pub unarchive_value: Option<String>,
	pub sort_field: Option<String>,
	pub accountability: Option<String>,
	pub color: Option<String>,
	pub sort: Option<i32>,
	pub group: Option<String>,
	pub collapse: String,
	pub preview_url: Option<String>,
	pub versioning: bool,
}

impl From<Row> for DirectusCollections {
	fn from(row: Row) -> Self {
		Self {
			collection: row.get("collection"),
			icon: row.get("icon"),
			note: row.get("note"),
			display_template: row.get("display_template"),
			hidden: row.get("hidden"),
			singleton: row.get("singleton"),
			archive_field: row.get("archive_field"),
			archive_app_filter: row.get("archive_app_filter"),
			archive_value: row.get("archive_value"),
			unarchive_value: row.get("unarchive_value"),
			sort_field: row.get("sort_field"),
			accountability: row.get("accountability"),
			color: row.get("color"),
			sort: row.get("sort"),
			group: row.get("group"),
			collapse: row.get("collapse"),
			preview_url: row.get("preview_url"),
			versioning: row.get("versioning"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusComments {
	pub id: Uuid,
	pub collection: String,
	pub item: String,
	pub comment: String,
	pub date_created: Option<String>,
	pub date_updated: Option<String>,
	pub user_created: Option<Uuid>,
	pub user_updated: Option<Uuid>,
}

impl From<Row> for DirectusComments {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			collection: row.get("collection"),
			item: row.get("item"),
			comment: row.get("comment"),
			date_created: row.get("date_created"),
			date_updated: row.get("date_updated"),
			user_created: row.get("user_created"),
			user_updated: row.get("user_updated"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusDashboards {
	pub id: Uuid,
	pub name: String,
	pub icon: String,
	pub note: Option<String>,
	pub date_created: Option<String>,
	pub user_created: Option<Uuid>,
	pub color: Option<String>,
}

impl From<Row> for DirectusDashboards {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			icon: row.get("icon"),
			note: row.get("note"),
			date_created: row.get("date_created"),
			user_created: row.get("user_created"),
			color: row.get("color"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusExtensions {
	pub enabled: bool,
	pub id: Uuid,
	pub folder: String,
	pub source: String,
	pub bundle: Option<Uuid>,
}

impl From<Row> for DirectusExtensions {
	fn from(row: Row) -> Self {
		Self {
			enabled: row.get("enabled"),
			id: row.get("id"),
			folder: row.get("folder"),
			source: row.get("source"),
			bundle: row.get("bundle"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusFields {
	pub id: i32,
	pub collection: String,
	pub field: String,
	pub special: Option<String>,
	pub interface: Option<String>,
	pub display: Option<String>,
	pub readonly: bool,
	pub hidden: bool,
	pub sort: Option<i32>,
	pub width: Option<String>,
	pub note: Option<String>,
	pub required: Option<bool>,
	pub group: Option<String>,
	pub validation_message: Option<String>,
}

impl From<Row> for DirectusFields {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			collection: row.get("collection"),
			field: row.get("field"),
			special: row.get("special"),
			interface: row.get("interface"),
			display: row.get("display"),
			readonly: row.get("readonly"),
			hidden: row.get("hidden"),
			sort: row.get("sort"),
			width: row.get("width"),
			note: row.get("note"),
			required: row.get("required"),
			group: row.get("group"),
			validation_message: row.get("validation_message"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusFiles {
	pub id: Uuid,
	pub storage: String,
	pub filename_disk: Option<String>,
	pub filename_download: String,
	pub title: Option<String>,
	#[ormlite(column = "type")]
	pub r_type: Option<String>,
	pub folder: Option<Uuid>,
	pub uploaded_by: Option<Uuid>,
	pub created_on: String,
	pub modified_by: Option<Uuid>,
	pub modified_on: String,
	pub charset: Option<String>,
	pub filesize: Option<i64>,
	pub width: Option<i32>,
	pub height: Option<i32>,
	pub duration: Option<i32>,
	pub embed: Option<String>,
	pub description: Option<String>,
	pub location: Option<String>,
	pub tags: Option<String>,
	pub focal_point_x: Option<i32>,
	pub focal_point_y: Option<i32>,
	pub tus_id: Option<String>,
	pub uploaded_on: Option<String>,
}

impl From<Row> for DirectusFiles {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			storage: row.get("storage"),
			filename_disk: row.get("filename_disk"),
			filename_download: row.get("filename_download"),
			title: row.get("title"),
			r_type: row.get("type"),
			folder: row.get("folder"),
			uploaded_by: row.get("uploaded_by"),
			created_on: row.get("created_on"),
			modified_by: row.get("modified_by"),
			modified_on: row.get("modified_on"),
			charset: row.get("charset"),
			filesize: row.get("filesize"),
			width: row.get("width"),
			height: row.get("height"),
			duration: row.get("duration"),
			embed: row.get("embed"),
			description: row.get("description"),
			location: row.get("location"),
			tags: row.get("tags"),
			focal_point_x: row.get("focal_point_x"),
			focal_point_y: row.get("focal_point_y"),
			tus_id: row.get("tus_id"),
			uploaded_on: row.get("uploaded_on"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusFlows {
	pub id: Uuid,
	pub name: String,
	pub icon: Option<String>,
	pub color: Option<String>,
	pub description: Option<String>,
	pub status: String,
	pub trigger: Option<String>,
	pub accountability: Option<String>,
	pub operation: Option<Uuid>,
	pub date_created: Option<String>,
	pub user_created: Option<Uuid>,
}

impl From<Row> for DirectusFlows {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			icon: row.get("icon"),
			color: row.get("color"),
			description: row.get("description"),
			status: row.get("status"),
			trigger: row.get("trigger"),
			accountability: row.get("accountability"),
			operation: row.get("operation"),
			date_created: row.get("date_created"),
			user_created: row.get("user_created"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusFolders {
	pub id: Uuid,
	pub name: String,
	pub parent: Option<Uuid>,
}

impl From<Row> for DirectusFolders {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			parent: row.get("parent"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusMigrations {
	#[ormlite(primary_key)]
	pub version: String,
	pub name: String,
	pub timestamp: Option<String>,
}

impl From<Row> for DirectusMigrations {
	fn from(row: Row) -> Self {
		Self {
			version: row.get("version"),
			name: row.get("name"),
			timestamp: row.get("timestamp"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusNotifications {
	pub id: i32,
	pub timestamp: Option<String>,
	pub status: Option<String>,
	pub recipient: Uuid,
	pub sender: Option<Uuid>,
	pub subject: String,
	pub message: Option<String>,
	pub collection: Option<String>,
	pub item: Option<String>,
}

impl From<Row> for DirectusNotifications {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			timestamp: row.get("timestamp"),
			status: row.get("status"),
			recipient: row.get("recipient"),
			sender: row.get("sender"),
			subject: row.get("subject"),
			message: row.get("message"),
			collection: row.get("collection"),
			item: row.get("item"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusOperations {
	pub id: Uuid,
	pub name: Option<String>,
	pub key: String,
	#[ormlite(column = "type")]
	pub r_type: String,
	pub position_x: i32,
	pub position_y: i32,
	pub resolve: Option<Uuid>,
	pub reject: Option<Uuid>,
	pub flow: Uuid,
	pub date_created: Option<String>,
	pub user_created: Option<Uuid>,
}

impl From<Row> for DirectusOperations {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			key: row.get("key"),
			r_type: row.get("type"),
			position_x: row.get("position_x"),
			position_y: row.get("position_y"),
			resolve: row.get("resolve"),
			reject: row.get("reject"),
			flow: row.get("flow"),
			date_created: row.get("date_created"),
			user_created: row.get("user_created"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusPanels {
	pub id: Uuid,
	pub dashboard: Uuid,
	pub name: Option<String>,
	pub icon: Option<String>,
	pub color: Option<String>,
	pub show_header: bool,
	pub note: Option<String>,
	#[ormlite(column = "type")]
	pub r_type: String,
	pub position_x: i32,
	pub position_y: i32,
	pub width: i32,
	pub height: i32,
	pub date_created: Option<String>,
	pub user_created: Option<Uuid>,
}

impl From<Row> for DirectusPanels {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			dashboard: row.get("dashboard"),
			name: row.get("name"),
			icon: row.get("icon"),
			color: row.get("color"),
			show_header: row.get("show_header"),
			note: row.get("note"),
			r_type: row.get("type"),
			position_x: row.get("position_x"),
			position_y: row.get("position_y"),
			width: row.get("width"),
			height: row.get("height"),
			date_created: row.get("date_created"),
			user_created: row.get("user_created"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusPermissions {
	pub id: i32,
	pub collection: String,
	pub action: String,

	pub fields: Option<String>,
	pub policy: Uuid,
}

impl From<Row> for DirectusPermissions {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			collection: row.get("collection"),
			action: row.get("action"),
			fields: row.get("fields"),
			policy: row.get("policy"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusPolicies {
	pub id: Uuid,
	pub name: String,
	pub icon: String,
	pub description: Option<String>,
	pub ip_access: Option<String>,
	pub enforce_tfa: bool,
	pub admin_access: bool,
	pub app_access: bool,
}

impl From<Row> for DirectusPolicies {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			icon: row.get("icon"),
			description: row.get("description"),
			ip_access: row.get("ip_access"),
			enforce_tfa: row.get("enforce_tfa"),
			admin_access: row.get("admin_access"),
			app_access: row.get("app_access"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusPresets {
	pub id: i32,
	pub bookmark: Option<String>,
	pub user: Option<Uuid>,
	pub role: Option<Uuid>,
	pub collection: Option<String>,
	pub search: Option<String>,
	pub layout: Option<String>,

	pub refresh_interval: Option<i32>,
	pub icon: Option<String>,
	pub color: Option<String>,
}

impl From<Row> for DirectusPresets {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			bookmark: row.get("bookmark"),
			user: row.get("user"),
			role: row.get("role"),
			collection: row.get("collection"),
			search: row.get("search"),
			layout: row.get("layout"),

			refresh_interval: row.get("refresh_interval"),
			icon: row.get("icon"),
			color: row.get("color"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusRelations {
	pub id: i32,
	pub many_collection: String,
	pub many_field: String,
	pub one_collection: Option<String>,
	pub one_field: Option<String>,
	pub one_collection_field: Option<String>,
	pub one_allowed_collections: Option<String>,
	pub junction_field: Option<String>,
	pub sort_field: Option<String>,
	pub one_deselect_action: String,
}

impl From<Row> for DirectusRelations {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			many_collection: row.get("many_collection"),
			many_field: row.get("many_field"),
			one_collection: row.get("one_collection"),
			one_field: row.get("one_field"),
			one_collection_field: row.get("one_collection_field"),
			one_allowed_collections: row.get("one_allowed_collections"),
			junction_field: row.get("junction_field"),
			sort_field: row.get("sort_field"),
			one_deselect_action: row.get("one_deselect_action"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusRevisions {
	pub id: i32,
	pub activity: i32,
	pub collection: String,
	pub item: String,

	pub parent: Option<i32>,
	pub version: Option<Uuid>,
}

impl From<Row> for DirectusRevisions {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			activity: row.get("activity"),
			collection: row.get("collection"),
			item: row.get("item"),

			parent: row.get("parent"),
			version: row.get("version"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusRoles {
	pub id: Uuid,
	pub name: String,
	pub icon: String,
	pub description: Option<String>,
	pub parent: Option<Uuid>,
}

impl From<Row> for DirectusRoles {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			name: row.get("name"),
			icon: row.get("icon"),
			description: row.get("description"),
			parent: row.get("parent"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusSessions {
	#[ormlite(primary_key)]
	pub token: String,
	pub user: Option<Uuid>,
	pub expires: String,
	pub ip: Option<String>,
	pub user_agent: Option<String>,
	pub share: Option<Uuid>,
	pub origin: Option<String>,
	pub next_token: Option<String>,
}

impl From<Row> for DirectusSessions {
	fn from(row: Row) -> Self {
		Self {
			token: row.get("token"),
			user: row.get("user"),
			expires: row.get("expires"),
			ip: row.get("ip"),
			user_agent: row.get("user_agent"),
			share: row.get("share"),
			origin: row.get("origin"),
			next_token: row.get("next_token"),
		}
	}
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct DirectusSettings {
	pub id: i32,
	pub project_name: String,
	pub project_url: Option<String>,
	pub project_color: String,
	pub project_logo: Option<Uuid>,
	pub public_foreground: Option<Uuid>,
	pub public_background: Option<Uuid>,
	pub public_note: Option<String>,
	pub auth_login_attempts: Option<i32>,
	pub auth_password_policy: Option<String>,
	pub storage_asset_transform: Option<String>,
	pub custom_css: Option<String>,
	pub storage_default_folder: Option<Uuid>,
	pub mapbox_key: Option<String>,
	pub project_descriptor: Option<String>,
	pub default_language: String,
	pub public_favicon: Option<Uuid>,
	pub default_appearance: String,
	pub default_theme_light: Option<String>,
	pub default_theme_dark: Option<String>,
	pub report_error_url: Option<String>,
	pub report_bug_url: Option<String>,
	pub report_feature_url: Option<String>,
	pub public_registration: bool,
	pub public_registration_verify_email: bool,
	pub public_registration_role: Option<Uuid>,
}

impl From<Row> for DirectusSettings {
	fn from(row: Row) -> Self {
		Self {
			id: row.get("id"),
			project_name: row.get("project_name"),
			project_url: row.get("project_url"),
			project_color: row.get("project_color"),
			project_logo: row.get("project_logo"),
			public_foreground: row.get("public_foreground"),
			public_background: row.get("public_background"),
			public_note: row.get("public_note"),
			auth_login_attempts: row.get("auth_login_attempts"),
			auth_password_policy: row.get("auth_password_policy"),
			storage_asset_transform: row.get("storage_asset_transform"),
			custom_css: row.get("custom_css"),
			storage_default_folder: row.get("storage_default_folder"),
			mapbox_key: row.get("mapbox_key"),
			project_descriptor: row.get("project_descriptor"),
			default_language: row.get("default_language"),
			public_favicon: row.get("public_favicon"),
			default_appearance: row.get("default_appearance"),
			default_theme_light: row.get("default_theme_light"),
			default_theme_dark: row.get("default_theme_dark"),
			report_error_url: row.get("report_error_url"),
			report_bug_url: row.get("report_bug_url"),
			report_feature_url: row.get("report_feature_url"),
			public_registration: row.get("public_registration"),
			public_registration_verify_email: row
				.get("public_registration_verify_email"),
			public_registration_role: row.get("public_registration_role"),
		}
	}
}
