// autogenerated using pg2rs
use postgres::row::Row;
use postgres::types::{ToSql, FromSql};

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct articles {
    pub id: Uuid,
    pub status: String,
    pub sort: Option<i32>,
    pub user_created: Option<Uuid>,
    pub date_created: Option<String>,
    pub user_updated: Option<Uuid>,
    pub date_updated: Option<String>,
    pub image: Option<Uuid>,
    pub author: Option<Uuid>,
}

impl From<Row> for articles {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            status: row.get("status"),
            sort: row.get("sort"),
            user_created: row.get("user_created"),
            date_created: row.get("date_created"),
            user_updated: row.get("user_updated"),
            date_updated: row.get("date_updated"),
            image: row.get("image"),
            author: row.get("author"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct articles_translations {
    pub id: i32,
    pub articles_id: Option<Uuid>,
    pub languages_code: Option<String>,
    pub title: Option<String>,
    pub slug: Option<String>,
    pub summary: Option<String>,
    pub content: Option<String>,
}

impl From<Row> for articles_translations {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            articles_id: row.get("articles_id"),
            languages_code: row.get("languages_code"),
            title: row.get("title"),
            slug: row.get("slug"),
            summary: row.get("summary"),
            content: row.get("content"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_access {
    pub id: Uuid,
    pub role: Option<Uuid>,
    pub user: Option<Uuid>,
    pub policy: Uuid,
    pub sort: Option<i32>,
}

impl From<Row> for directus_access {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            role: row.get("role"),
            user: row.get("user"),
            policy: row.get("policy"),
            sort: row.get("sort"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_activity {
    pub id: i32,
    pub action: String,
    pub user: Option<Uuid>,
    pub timestamp: String,
    pub ip: Option<String>,
    pub user_agent: Option<String>,
    pub collection: String,
    pub item: String,
    pub comment: Option<String>,
    pub origin: Option<String>,
}

impl From<Row> for directus_activity {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            action: row.get("action"),
            user: row.get("user"),
            timestamp: row.get("timestamp"),
            ip: row.get("ip"),
            user_agent: row.get("user_agent"),
            collection: row.get("collection"),
            item: row.get("item"),
            comment: row.get("comment"),
            origin: row.get("origin"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_collections {
    pub collection: String,
    pub icon: Option<String>,
    pub note: Option<String>,
    pub display_template: Option<String>,
    pub hidden: bool,
    pub singleton: bool,
    pub translations: Option<Json>,
    pub archive_field: Option<String>,
    pub archive_app_filter: bool,
    pub archive_value: Option<String>,
    pub unarchive_value: Option<String>,
    pub sort_field: Option<String>,
    pub accountability: Option<String>,
    pub color: Option<String>,
    pub item_duplication_fields: Option<Json>,
    pub sort: Option<i32>,
    pub group: Option<String>,
    pub collapse: String,
    pub preview_url: Option<String>,
    pub versioning: bool,
}

impl From<Row> for directus_collections {
    fn from(row: Row) -> Self {
        Self {
            collection: row.get("collection"),
            icon: row.get("icon"),
            note: row.get("note"),
            display_template: row.get("display_template"),
            hidden: row.get("hidden"),
            singleton: row.get("singleton"),
            translations: row.get("translations"),
            archive_field: row.get("archive_field"),
            archive_app_filter: row.get("archive_app_filter"),
            archive_value: row.get("archive_value"),
            unarchive_value: row.get("unarchive_value"),
            sort_field: row.get("sort_field"),
            accountability: row.get("accountability"),
            color: row.get("color"),
            item_duplication_fields: row.get("item_duplication_fields"),
            sort: row.get("sort"),
            group: row.get("group"),
            collapse: row.get("collapse"),
            preview_url: row.get("preview_url"),
            versioning: row.get("versioning"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_comments {
    pub id: Uuid,
    pub collection: String,
    pub item: String,
    pub comment: String,
    pub date_created: Option<String>,
    pub date_updated: Option<String>,
    pub user_created: Option<Uuid>,
    pub user_updated: Option<Uuid>,
}

impl From<Row> for directus_comments {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            collection: row.get("collection"),
            item: row.get("item"),
            comment: row.get("comment"),
            date_created: row.get("date_created"),
            date_updated: row.get("date_updated"),
            user_created: row.get("user_created"),
            user_updated: row.get("user_updated"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_dashboards {
    pub id: Uuid,
    pub name: String,
    pub icon: String,
    pub note: Option<String>,
    pub date_created: Option<String>,
    pub user_created: Option<Uuid>,
    pub color: Option<String>,
}

impl From<Row> for directus_dashboards {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            icon: row.get("icon"),
            note: row.get("note"),
            date_created: row.get("date_created"),
            user_created: row.get("user_created"),
            color: row.get("color"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_extensions {
    pub enabled: bool,
    pub id: Uuid,
    pub folder: String,
    pub source: String,
    pub bundle: Option<Uuid>,
}

impl From<Row> for directus_extensions {
    fn from(row: Row) -> Self {
        Self {
            enabled: row.get("enabled"),
            id: row.get("id"),
            folder: row.get("folder"),
            source: row.get("source"),
            bundle: row.get("bundle"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_fields {
    pub id: i32,
    pub collection: String,
    pub field: String,
    pub special: Option<String>,
    pub interface: Option<String>,
    pub options: Option<Json>,
    pub display: Option<String>,
    pub display_options: Option<Json>,
    pub readonly: bool,
    pub hidden: bool,
    pub sort: Option<i32>,
    pub width: Option<String>,
    pub translations: Option<Json>,
    pub note: Option<String>,
    pub conditions: Option<Json>,
    pub required: Option<bool>,
    pub group: Option<String>,
    pub validation: Option<Json>,
    pub validation_message: Option<String>,
}

impl From<Row> for directus_fields {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            collection: row.get("collection"),
            field: row.get("field"),
            special: row.get("special"),
            interface: row.get("interface"),
            options: row.get("options"),
            display: row.get("display"),
            display_options: row.get("display_options"),
            readonly: row.get("readonly"),
            hidden: row.get("hidden"),
            sort: row.get("sort"),
            width: row.get("width"),
            translations: row.get("translations"),
            note: row.get("note"),
            conditions: row.get("conditions"),
            required: row.get("required"),
            group: row.get("group"),
            validation: row.get("validation"),
            validation_message: row.get("validation_message"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_files {
    pub id: Uuid,
    pub storage: String,
    pub filename_disk: Option<String>,
    pub filename_download: String,
    pub title: Option<String>,
    pub type: Option<String>,
    pub folder: Option<Uuid>,
    pub uploaded_by: Option<Uuid>,
    pub created_on: String,
    pub modified_by: Option<Uuid>,
    pub modified_on: String,
    pub charset: Option<String>,
    pub filesize: Option<i64>,
    pub width: Option<i32>,
    pub height: Option<i32>,
    pub duration: Option<i32>,
    pub embed: Option<String>,
    pub description: Option<String>,
    pub location: Option<String>,
    pub tags: Option<String>,
    pub metadata: Option<Json>,
    pub focal_point_x: Option<i32>,
    pub focal_point_y: Option<i32>,
    pub tus_id: Option<String>,
    pub tus_data: Option<Json>,
    pub uploaded_on: Option<String>,
}

impl From<Row> for directus_files {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            storage: row.get("storage"),
            filename_disk: row.get("filename_disk"),
            filename_download: row.get("filename_download"),
            title: row.get("title"),
            type: row.get("type"),
            folder: row.get("folder"),
            uploaded_by: row.get("uploaded_by"),
            created_on: row.get("created_on"),
            modified_by: row.get("modified_by"),
            modified_on: row.get("modified_on"),
            charset: row.get("charset"),
            filesize: row.get("filesize"),
            width: row.get("width"),
            height: row.get("height"),
            duration: row.get("duration"),
            embed: row.get("embed"),
            description: row.get("description"),
            location: row.get("location"),
            tags: row.get("tags"),
            metadata: row.get("metadata"),
            focal_point_x: row.get("focal_point_x"),
            focal_point_y: row.get("focal_point_y"),
            tus_id: row.get("tus_id"),
            tus_data: row.get("tus_data"),
            uploaded_on: row.get("uploaded_on"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_flows {
    pub id: Uuid,
    pub name: String,
    pub icon: Option<String>,
    pub color: Option<String>,
    pub description: Option<String>,
    pub status: String,
    pub trigger: Option<String>,
    pub accountability: Option<String>,
    pub options: Option<Json>,
    pub operation: Option<Uuid>,
    pub date_created: Option<String>,
    pub user_created: Option<Uuid>,
}

impl From<Row> for directus_flows {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            icon: row.get("icon"),
            color: row.get("color"),
            description: row.get("description"),
            status: row.get("status"),
            trigger: row.get("trigger"),
            accountability: row.get("accountability"),
            options: row.get("options"),
            operation: row.get("operation"),
            date_created: row.get("date_created"),
            user_created: row.get("user_created"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_folders {
    pub id: Uuid,
    pub name: String,
    pub parent: Option<Uuid>,
}

impl From<Row> for directus_folders {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            parent: row.get("parent"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_migrations {
    pub version: String,
    pub name: String,
    pub timestamp: Option<String>,
}

impl From<Row> for directus_migrations {
    fn from(row: Row) -> Self {
        Self {
            version: row.get("version"),
            name: row.get("name"),
            timestamp: row.get("timestamp"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_notifications {
    pub id: i32,
    pub timestamp: Option<String>,
    pub status: Option<String>,
    pub recipient: Uuid,
    pub sender: Option<Uuid>,
    pub subject: String,
    pub message: Option<String>,
    pub collection: Option<String>,
    pub item: Option<String>,
}

impl From<Row> for directus_notifications {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            timestamp: row.get("timestamp"),
            status: row.get("status"),
            recipient: row.get("recipient"),
            sender: row.get("sender"),
            subject: row.get("subject"),
            message: row.get("message"),
            collection: row.get("collection"),
            item: row.get("item"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_operations {
    pub id: Uuid,
    pub name: Option<String>,
    pub key: String,
    pub type: String,
    pub position_x: i32,
    pub position_y: i32,
    pub options: Option<Json>,
    pub resolve: Option<Uuid>,
    pub reject: Option<Uuid>,
    pub flow: Uuid,
    pub date_created: Option<String>,
    pub user_created: Option<Uuid>,
}

impl From<Row> for directus_operations {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            key: row.get("key"),
            type: row.get("type"),
            position_x: row.get("position_x"),
            position_y: row.get("position_y"),
            options: row.get("options"),
            resolve: row.get("resolve"),
            reject: row.get("reject"),
            flow: row.get("flow"),
            date_created: row.get("date_created"),
            user_created: row.get("user_created"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_panels {
    pub id: Uuid,
    pub dashboard: Uuid,
    pub name: Option<String>,
    pub icon: Option<String>,
    pub color: Option<String>,
    pub show_header: bool,
    pub note: Option<String>,
    pub type: String,
    pub position_x: i32,
    pub position_y: i32,
    pub width: i32,
    pub height: i32,
    pub options: Option<Json>,
    pub date_created: Option<String>,
    pub user_created: Option<Uuid>,
}

impl From<Row> for directus_panels {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            dashboard: row.get("dashboard"),
            name: row.get("name"),
            icon: row.get("icon"),
            color: row.get("color"),
            show_header: row.get("show_header"),
            note: row.get("note"),
            type: row.get("type"),
            position_x: row.get("position_x"),
            position_y: row.get("position_y"),
            width: row.get("width"),
            height: row.get("height"),
            options: row.get("options"),
            date_created: row.get("date_created"),
            user_created: row.get("user_created"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_permissions {
    pub id: i32,
    pub collection: String,
    pub action: String,
    pub permissions: Option<Json>,
    pub validation: Option<Json>,
    pub presets: Option<Json>,
    pub fields: Option<String>,
    pub policy: Uuid,
}

impl From<Row> for directus_permissions {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            collection: row.get("collection"),
            action: row.get("action"),
            permissions: row.get("permissions"),
            validation: row.get("validation"),
            presets: row.get("presets"),
            fields: row.get("fields"),
            policy: row.get("policy"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_policies {
    pub id: Uuid,
    pub name: String,
    pub icon: String,
    pub description: Option<String>,
    pub ip_access: Option<String>,
    pub enforce_tfa: bool,
    pub admin_access: bool,
    pub app_access: bool,
}

impl From<Row> for directus_policies {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            icon: row.get("icon"),
            description: row.get("description"),
            ip_access: row.get("ip_access"),
            enforce_tfa: row.get("enforce_tfa"),
            admin_access: row.get("admin_access"),
            app_access: row.get("app_access"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_presets {
    pub id: i32,
    pub bookmark: Option<String>,
    pub user: Option<Uuid>,
    pub role: Option<Uuid>,
    pub collection: Option<String>,
    pub search: Option<String>,
    pub layout: Option<String>,
    pub layout_query: Option<Json>,
    pub layout_options: Option<Json>,
    pub refresh_interval: Option<i32>,
    pub filter: Option<Json>,
    pub icon: Option<String>,
    pub color: Option<String>,
}

impl From<Row> for directus_presets {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            bookmark: row.get("bookmark"),
            user: row.get("user"),
            role: row.get("role"),
            collection: row.get("collection"),
            search: row.get("search"),
            layout: row.get("layout"),
            layout_query: row.get("layout_query"),
            layout_options: row.get("layout_options"),
            refresh_interval: row.get("refresh_interval"),
            filter: row.get("filter"),
            icon: row.get("icon"),
            color: row.get("color"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_relations {
    pub id: i32,
    pub many_collection: String,
    pub many_field: String,
    pub one_collection: Option<String>,
    pub one_field: Option<String>,
    pub one_collection_field: Option<String>,
    pub one_allowed_collections: Option<String>,
    pub junction_field: Option<String>,
    pub sort_field: Option<String>,
    pub one_deselect_action: String,
}

impl From<Row> for directus_relations {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            many_collection: row.get("many_collection"),
            many_field: row.get("many_field"),
            one_collection: row.get("one_collection"),
            one_field: row.get("one_field"),
            one_collection_field: row.get("one_collection_field"),
            one_allowed_collections: row.get("one_allowed_collections"),
            junction_field: row.get("junction_field"),
            sort_field: row.get("sort_field"),
            one_deselect_action: row.get("one_deselect_action"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_revisions {
    pub id: i32,
    pub activity: i32,
    pub collection: String,
    pub item: String,
    pub data: Option<Json>,
    pub delta: Option<Json>,
    pub parent: Option<i32>,
    pub version: Option<Uuid>,
}

impl From<Row> for directus_revisions {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            activity: row.get("activity"),
            collection: row.get("collection"),
            item: row.get("item"),
            data: row.get("data"),
            delta: row.get("delta"),
            parent: row.get("parent"),
            version: row.get("version"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_roles {
    pub id: Uuid,
    pub name: String,
    pub icon: String,
    pub description: Option<String>,
    pub parent: Option<Uuid>,
}

impl From<Row> for directus_roles {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            icon: row.get("icon"),
            description: row.get("description"),
            parent: row.get("parent"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_sessions {
    pub token: String,
    pub user: Option<Uuid>,
    pub expires: String,
    pub ip: Option<String>,
    pub user_agent: Option<String>,
    pub share: Option<Uuid>,
    pub origin: Option<String>,
    pub next_token: Option<String>,
}

impl From<Row> for directus_sessions {
    fn from(row: Row) -> Self {
        Self {
            token: row.get("token"),
            user: row.get("user"),
            expires: row.get("expires"),
            ip: row.get("ip"),
            user_agent: row.get("user_agent"),
            share: row.get("share"),
            origin: row.get("origin"),
            next_token: row.get("next_token"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_settings {
    pub id: i32,
    pub project_name: String,
    pub project_url: Option<String>,
    pub project_color: String,
    pub project_logo: Option<Uuid>,
    pub public_foreground: Option<Uuid>,
    pub public_background: Option<Uuid>,
    pub public_note: Option<String>,
    pub auth_login_attempts: Option<i32>,
    pub auth_password_policy: Option<String>,
    pub storage_asset_transform: Option<String>,
    pub storage_asset_presets: Option<Json>,
    pub custom_css: Option<String>,
    pub storage_default_folder: Option<Uuid>,
    pub basemaps: Option<Json>,
    pub mapbox_key: Option<String>,
    pub module_bar: Option<Json>,
    pub project_descriptor: Option<String>,
    pub default_language: String,
    pub custom_aspect_ratios: Option<Json>,
    pub public_favicon: Option<Uuid>,
    pub default_appearance: String,
    pub default_theme_light: Option<String>,
    pub theme_light_overrides: Option<Json>,
    pub default_theme_dark: Option<String>,
    pub theme_dark_overrides: Option<Json>,
    pub report_error_url: Option<String>,
    pub report_bug_url: Option<String>,
    pub report_feature_url: Option<String>,
    pub public_registration: bool,
    pub public_registration_verify_email: bool,
    pub public_registration_role: Option<Uuid>,
    pub public_registration_email_filter: Option<Json>,
}

impl From<Row> for directus_settings {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            project_name: row.get("project_name"),
            project_url: row.get("project_url"),
            project_color: row.get("project_color"),
            project_logo: row.get("project_logo"),
            public_foreground: row.get("public_foreground"),
            public_background: row.get("public_background"),
            public_note: row.get("public_note"),
            auth_login_attempts: row.get("auth_login_attempts"),
            auth_password_policy: row.get("auth_password_policy"),
            storage_asset_transform: row.get("storage_asset_transform"),
            storage_asset_presets: row.get("storage_asset_presets"),
            custom_css: row.get("custom_css"),
            storage_default_folder: row.get("storage_default_folder"),
            basemaps: row.get("basemaps"),
            mapbox_key: row.get("mapbox_key"),
            module_bar: row.get("module_bar"),
            project_descriptor: row.get("project_descriptor"),
            default_language: row.get("default_language"),
            custom_aspect_ratios: row.get("custom_aspect_ratios"),
            public_favicon: row.get("public_favicon"),
            default_appearance: row.get("default_appearance"),
            default_theme_light: row.get("default_theme_light"),
            theme_light_overrides: row.get("theme_light_overrides"),
            default_theme_dark: row.get("default_theme_dark"),
            theme_dark_overrides: row.get("theme_dark_overrides"),
            report_error_url: row.get("report_error_url"),
            report_bug_url: row.get("report_bug_url"),
            report_feature_url: row.get("report_feature_url"),
            public_registration: row.get("public_registration"),
            public_registration_verify_email: row.get("public_registration_verify_email"),
            public_registration_role: row.get("public_registration_role"),
            public_registration_email_filter: row.get("public_registration_email_filter"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_shares {
    pub id: Uuid,
    pub name: Option<String>,
    pub collection: String,
    pub item: String,
    pub role: Option<Uuid>,
    pub password: Option<String>,
    pub user_created: Option<Uuid>,
    pub date_created: Option<String>,
    pub date_start: Option<String>,
    pub date_end: Option<String>,
    pub times_used: Option<i32>,
    pub max_uses: Option<i32>,
}

impl From<Row> for directus_shares {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            collection: row.get("collection"),
            item: row.get("item"),
            role: row.get("role"),
            password: row.get("password"),
            user_created: row.get("user_created"),
            date_created: row.get("date_created"),
            date_start: row.get("date_start"),
            date_end: row.get("date_end"),
            times_used: row.get("times_used"),
            max_uses: row.get("max_uses"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_translations {
    pub id: Uuid,
    pub language: String,
    pub key: String,
    pub value: String,
}

impl From<Row> for directus_translations {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            language: row.get("language"),
            key: row.get("key"),
            value: row.get("value"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_users {
    pub id: Uuid,
    pub first_name: Option<String>,
    pub last_name: Option<String>,
    pub email: Option<String>,
    pub password: Option<String>,
    pub location: Option<String>,
    pub title: Option<String>,
    pub description: Option<String>,
    pub tags: Option<Json>,
    pub avatar: Option<Uuid>,
    pub language: Option<String>,
    pub tfa_secret: Option<String>,
    pub status: String,
    pub role: Option<Uuid>,
    pub token: Option<String>,
    pub last_access: Option<String>,
    pub last_page: Option<String>,
    pub provider: String,
    pub external_identifier: Option<String>,
    pub auth_data: Option<Json>,
    pub email_notifications: Option<bool>,
    pub appearance: Option<String>,
    pub theme_dark: Option<String>,
    pub theme_light: Option<String>,
    pub theme_light_overrides: Option<Json>,
    pub theme_dark_overrides: Option<Json>,
    pub other_avatar: Option<Uuid>,
}

impl From<Row> for directus_users {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            first_name: row.get("first_name"),
            last_name: row.get("last_name"),
            email: row.get("email"),
            password: row.get("password"),
            location: row.get("location"),
            title: row.get("title"),
            description: row.get("description"),
            tags: row.get("tags"),
            avatar: row.get("avatar"),
            language: row.get("language"),
            tfa_secret: row.get("tfa_secret"),
            status: row.get("status"),
            role: row.get("role"),
            token: row.get("token"),
            last_access: row.get("last_access"),
            last_page: row.get("last_page"),
            provider: row.get("provider"),
            external_identifier: row.get("external_identifier"),
            auth_data: row.get("auth_data"),
            email_notifications: row.get("email_notifications"),
            appearance: row.get("appearance"),
            theme_dark: row.get("theme_dark"),
            theme_light: row.get("theme_light"),
            theme_light_overrides: row.get("theme_light_overrides"),
            theme_dark_overrides: row.get("theme_dark_overrides"),
            other_avatar: row.get("other_avatar"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_versions {
    pub id: Uuid,
    pub key: String,
    pub name: Option<String>,
    pub collection: String,
    pub item: String,
    pub hash: Option<String>,
    pub date_created: Option<String>,
    pub date_updated: Option<String>,
    pub user_created: Option<Uuid>,
    pub user_updated: Option<Uuid>,
    pub delta: Option<Json>,
}

impl From<Row> for directus_versions {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            key: row.get("key"),
            name: row.get("name"),
            collection: row.get("collection"),
            item: row.get("item"),
            hash: row.get("hash"),
            date_created: row.get("date_created"),
            date_updated: row.get("date_updated"),
            user_created: row.get("user_created"),
            user_updated: row.get("user_updated"),
            delta: row.get("delta"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct directus_webhooks {
    pub id: i32,
    pub name: String,
    pub method: String,
    pub url: String,
    pub status: String,
    pub data: bool,
    pub actions: String,
    pub collections: String,
    pub headers: Option<Json>,
    pub was_active_before_deprecation: bool,
    pub migrated_flow: Option<Uuid>,
}

impl From<Row> for directus_webhooks {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            name: row.get("name"),
            method: row.get("method"),
            url: row.get("url"),
            status: row.get("status"),
            data: row.get("data"),
            actions: row.get("actions"),
            collections: row.get("collections"),
            headers: row.get("headers"),
            was_active_before_deprecation: row.get("was_active_before_deprecation"),
            migrated_flow: row.get("migrated_flow"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct ebooks {
    pub id: Uuid,
    pub status: String,
    pub sort: Option<i32>,
    pub user_created: Option<Uuid>,
    pub date_created: Option<String>,
    pub user_updated: Option<Uuid>,
    pub date_updated: Option<String>,
    pub date_published: Option<String>,
}

impl From<Row> for ebooks {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            status: row.get("status"),
            sort: row.get("sort"),
            user_created: row.get("user_created"),
            date_created: row.get("date_created"),
            user_updated: row.get("user_updated"),
            date_updated: row.get("date_updated"),
            date_published: row.get("date_published"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct ebooks_directus_users {
    pub id: i32,
    pub ebooks_id: Option<Uuid>,
    pub directus_users_id: Option<Uuid>,
}

impl From<Row> for ebooks_directus_users {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            ebooks_id: row.get("ebooks_id"),
            directus_users_id: row.get("directus_users_id"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct ebooks_translations {
    pub id: i32,
    pub ebooks_id: Option<Uuid>,
    pub languages_code: Option<String>,
    pub cover_image: Option<Uuid>,
    pub content: Option<String>,
    pub title: Option<String>,
    pub slug: Option<String>,
    pub summary: Option<String>,
    pub file: Option<Uuid>,
}

impl From<Row> for ebooks_translations {
    fn from(row: Row) -> Self {
        Self {
            id: row.get("id"),
            ebooks_id: row.get("ebooks_id"),
            languages_code: row.get("languages_code"),
            cover_image: row.get("cover_image"),
            content: row.get("content"),
            title: row.get("title"),
            slug: row.get("slug"),
            summary: row.get("summary"),
            file: row.get("file"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct languages {
    pub code: String,
    pub name: Option<String>,
    pub direction: String,
}

impl From<Row> for languages {
    fn from(row: Row) -> Self {
        Self {
            code: row.get("code"),
            name: row.get("name"),
            direction: row.get("direction"),
        }
    }
}

#[derive(Debug, ToSql, FromSql, ormlite::Model)]
pub struct spatial_ref_sys {
    pub srid: i32,
    pub auth_name: Option<String>,
    pub auth_srid: Option<i32>,
    pub srtext: Option<String>,
    pub proj_4text: Option<String>,
}

impl From<Row> for spatial_ref_sys {
    fn from(row: Row) -> Self {
        Self {
            srid: row.get("srid"),
            auth_name: row.get("auth_name"),
            auth_srid: row.get("auth_srid"),
            srtext: row.get("srtext"),
            proj_4text: row.get("proj4text"),
        }
    }
}
