/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Fields {
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<i32>,
	/// Unique name of the collection this field is in.
	#[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
	pub collection: Option<String>,
	/// Unique name of the field. Field name is unique within the collection.
	#[serde(rename = "field", skip_serializing_if = "Option::is_none")]
	pub field: Option<String>,
	#[serde(
		rename = "special",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub special: Option<Option<Vec<String>>>,
	#[serde(
		rename = "interface",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub interface: Option<Option<String>>,
	#[serde(
		rename = "options",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub options: Option<Option<json::Value>>,
	#[serde(
		rename = "display",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub display: Option<Option<String>>,
	#[serde(
		rename = "display_options",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub display_options: Option<Option<json::Value>>,
	#[serde(rename = "readonly", skip_serializing_if = "Option::is_none")]
	pub readonly: Option<bool>,
	#[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
	pub hidden: Option<bool>,
	#[serde(
		rename = "sort",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub sort: Option<Option<i32>>,
	#[serde(
		rename = "width",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub width: Option<Option<String>>,
	#[serde(
		rename = "translations",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub translations: Option<Option<json::Value>>,
	#[serde(
		rename = "note",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub note: Option<Option<String>>,
	#[serde(
		rename = "conditions",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub conditions: Option<Option<json::Value>>,
	#[serde(
		rename = "required",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub required: Option<Option<bool>>,
	#[serde(
		rename = "group",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub group: Option<Option<Box<super::FieldsGroup>>>,
	#[serde(
		rename = "validation",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub validation: Option<Option<json::Value>>,
	#[serde(
		rename = "validation_message",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub validation_message: Option<Option<String>>,
}

impl Fields {
	pub fn new() -> Fields {
		Fields {
			id: None,
			collection: None,
			field: None,
			special: None,
			interface: None,
			options: None,
			display: None,
			display_options: None,
			readonly: None,
			hidden: None,
			sort: None,
			width: None,
			translations: None,
			note: None,
			conditions: None,
			required: None,
			group: None,
			validation: None,
			validation_message: None,
		}
	}
}
