/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */


use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operations {
	/// Unique identifier for the operation.
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<String>,
	/// The name of the operation.
	#[serde(rename = "name", skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// Key for the operation. Must be unique within a given flow.
	#[serde(rename = "key", skip_serializing_if = "Option::is_none")]
	pub key: Option<String>,
	/// Type of operation. One of `log`, `mail`, `notification`, `create`, `read`, `request`, `sleep`, `transform`, `trigger`, `condition`, or any type of custom operation extensions.
	#[serde(rename = "type", skip_serializing_if = "Option::is_none")]
	pub r#type: Option<String>,
	/// Position of the operation on the X axis within the flow workspace.
	#[serde(rename = "position_x", skip_serializing_if = "Option::is_none")]
	pub position_x: Option<i32>,
	/// Position of the operation on the Y axis within the flow workspace.
	#[serde(rename = "position_y", skip_serializing_if = "Option::is_none")]
	pub position_y: Option<i32>,
	/// Options depending on the type of the operation.
	#[serde(
		rename = "options",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub options: Option<Option<json::Value>>,
	#[serde(rename = "resolve", skip_serializing_if = "Option::is_none")]
	pub resolve: Option<Box<super::OperationsResolve>>,
	#[serde(rename = "reject", skip_serializing_if = "Option::is_none")]
	pub reject: Option<Box<super::OperationsReject>>,
	#[serde(rename = "flow", skip_serializing_if = "Option::is_none")]
	pub flow: Option<Box<super::OperationsFlow>>,
	/// Timestamp in ISO8601 when the operation was created.
	#[serde(
		rename = "date_created",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub date_created: Option<Option<String>>,
	#[serde(rename = "user_created", skip_serializing_if = "Option::is_none")]
	pub user_created: Option<Box<super::OperationsUserCreated>>,
}

impl Operations {
	pub fn new() -> Operations {
		Operations {
			id: None,
			name: None,
			key: None,
			r#type: None,
			position_x: None,
			position_y: None,
			options: None,
			resolve: None,
			reject: None,
			flow: None,
			date_created: None,
			user_created: None,
		}
	}
}
