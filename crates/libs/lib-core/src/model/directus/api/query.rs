/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Query {
	/// Control what fields are being returned in the object.
	#[serde(rename = "fields", skip_serializing_if = "Option::is_none")]
	pub fields: Option<Vec<String>>,
	#[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
	pub filter: Option<json::Value>,
	/// Filter by items that contain the given search query in one of their fields.
	#[serde(rename = "search", skip_serializing_if = "Option::is_none")]
	pub search: Option<String>,
	/// How to sort the returned items.
	#[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
	pub sort: Option<Vec<String>>,
	/// Set the maximum number of items that will be returned
	#[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
	pub limit: Option<f64>,
	/// How many items to skip when fetching data.
	#[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
	pub offset: Option<f64>,
	/// Cursor for use in pagination. Often used in combination with limit.
	#[serde(rename = "page", skip_serializing_if = "Option::is_none")]
	pub page: Option<f64>,
	/// Deep allows you to set any of the other query parameters on a nested relational dataset.
	#[serde(rename = "deep", skip_serializing_if = "Option::is_none")]
	pub deep: Option<json::Value>,
}

impl Query {
	pub fn new() -> Query {
		Query {
			fields: None,
			filter: None,
			search: None,
			sort: None,
			limit: None,
			offset: None,
			page: None,
			deep: None,
		}
	}
}
