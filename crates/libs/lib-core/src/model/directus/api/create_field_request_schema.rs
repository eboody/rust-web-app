/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */


use serde::{Deserialize, Serialize};

/// CreateFieldRequestSchema : The schema info.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateFieldRequestSchema {
	/// The name of the field.
	#[serde(rename = "name", skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// The collection of the field.
	#[serde(rename = "table", skip_serializing_if = "Option::is_none")]
	pub table: Option<String>,
	/// The type of the field.
	#[serde(rename = "type", skip_serializing_if = "Option::is_none")]
	pub r#type: Option<String>,
	/// The default value of the field.
	#[serde(
		rename = "default_value",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub default_value: Option<Option<String>>,
	/// The max length of the field.
	#[serde(
		rename = "max_length",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub max_length: Option<Option<i32>>,
	/// If the field is nullable.
	#[serde(rename = "is_nullable", skip_serializing_if = "Option::is_none")]
	pub is_nullable: Option<bool>,
	/// If the field is primary key.
	#[serde(rename = "is_primary_key", skip_serializing_if = "Option::is_none")]
	pub is_primary_key: Option<bool>,
	/// If the field has auto increment.
	#[serde(rename = "has_auto_increment", skip_serializing_if = "Option::is_none")]
	pub has_auto_increment: Option<bool>,
	/// Related column from the foreign key constraint.
	#[serde(
		rename = "foreign_key_column",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub foreign_key_column: Option<Option<String>>,
	/// Related table from the foreign key constraint.
	#[serde(
		rename = "foreign_key_table",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub foreign_key_table: Option<Option<String>>,
	/// Comment as saved in the database.
	#[serde(
		rename = "comment",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub comment: Option<Option<String>>,
	/// Database schema (pg only).
	#[serde(rename = "schema", skip_serializing_if = "Option::is_none")]
	pub schema: Option<String>,
	/// Related schema from the foreign key constraint (pg only).
	#[serde(
		rename = "foreign_key_schema",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub foreign_key_schema: Option<Option<String>>,
}

impl CreateFieldRequestSchema {
	/// The schema info.
	pub fn new() -> CreateFieldRequestSchema {
		CreateFieldRequestSchema {
			name: None,
			table: None,
			r#type: None,
			default_value: None,
			max_length: None,
			is_nullable: None,
			is_primary_key: None,
			has_auto_increment: None,
			foreign_key_column: None,
			foreign_key_table: None,
			comment: None,
			schema: None,
			foreign_key_schema: None,
		}
	}
}
