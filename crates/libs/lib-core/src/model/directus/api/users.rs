/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Users {
	/// Unique identifier for the user.
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<String>,
	/// First name of the user.
	#[serde(rename = "first_name", skip_serializing_if = "Option::is_none")]
	pub first_name: Option<String>,
	/// Last name of the user.
	#[serde(rename = "last_name", skip_serializing_if = "Option::is_none")]
	pub last_name: Option<String>,
	/// Unique email address for the user.
	#[serde(rename = "email", skip_serializing_if = "Option::is_none")]
	pub email: Option<String>,
	/// Password of the user.
	#[serde(rename = "password", skip_serializing_if = "Option::is_none")]
	pub password: Option<String>,
	/// The user's location.
	#[serde(
		rename = "location",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub location: Option<Option<String>>,
	/// The user's title.
	#[serde(
		rename = "title",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub title: Option<Option<String>>,
	/// The user's description.
	#[serde(
		rename = "description",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub description: Option<Option<String>>,
	/// The user's tags.
	#[serde(
		rename = "tags",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub tags: Option<Option<Vec<String>>>,
	#[serde(
		rename = "avatar",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub avatar: Option<Option<Box<super::UsersAvatar>>>,
	/// The user's language used in Directus.
	#[serde(rename = "language", skip_serializing_if = "Option::is_none")]
	pub language: Option<String>,
	/// The 2FA secret string that's used to generate one time passwords.
	#[serde(
		rename = "tfa_secret",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub tfa_secret: Option<Option<String>>,
	/// Status of the user.
	#[serde(rename = "status", skip_serializing_if = "Option::is_none")]
	pub status: Option<Status>,
	#[serde(rename = "role", skip_serializing_if = "Option::is_none")]
	pub role: Option<Box<super::UsersRole>>,
	/// Static token for the user.
	#[serde(
		rename = "token",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub token: Option<Option<String>>,
	/// When this user used the API last.
	#[serde(
		rename = "last_access",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub last_access: Option<Option<String>>,
	/// Last page that the user was on.
	#[serde(
		rename = "last_page",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub last_page: Option<Option<String>>,
	#[serde(rename = "provider", skip_serializing_if = "Option::is_none")]
	pub provider: Option<String>,
	#[serde(
		rename = "external_identifier",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub external_identifier: Option<Option<String>>,
	#[serde(
		rename = "auth_data",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub auth_data: Option<Option<json::Value>>,
	#[serde(
		rename = "email_notifications",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub email_notifications: Option<Option<bool>>,
	#[serde(
		rename = "appearance",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub appearance: Option<Option<String>>,
	#[serde(
		rename = "theme_dark",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub theme_dark: Option<Option<String>>,
	#[serde(
		rename = "theme_light",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub theme_light: Option<Option<String>>,
	#[serde(
		rename = "theme_light_overrides",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub theme_light_overrides: Option<Option<json::Value>>,
	#[serde(
		rename = "theme_dark_overrides",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub theme_dark_overrides: Option<Option<json::Value>>,
	#[serde(
		rename = "policies",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub policies: Option<Option<json::Value>>,
}

impl Users {
	pub fn new() -> Users {
		Users {
			id: None,
			first_name: None,
			last_name: None,
			email: None,
			password: None,
			location: None,
			title: None,
			description: None,
			tags: None,
			avatar: None,
			language: None,
			tfa_secret: None,
			status: None,
			role: None,
			token: None,
			last_access: None,
			last_page: None,
			provider: None,
			external_identifier: None,
			auth_data: None,
			email_notifications: None,
			appearance: None,
			theme_dark: None,
			theme_light: None,
			theme_light_overrides: None,
			theme_dark_overrides: None,
			policies: None,
		}
	}
}
/// Status of the user.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Status {
	#[serde(rename = "active")]
	Active,
	#[serde(rename = "invited")]
	Invited,
	#[serde(rename = "draft")]
	Draft,
	#[serde(rename = "suspended")]
	Suspended,
	#[serde(rename = "deleted")]
	Deleted,
}

impl Default for Status {
	fn default() -> Status {
		Self::Active
	}
}
