/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Flows {
	/// Unique identifier for the flow.
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<String>,
	/// The name of the flow.
	#[serde(rename = "name", skip_serializing_if = "Option::is_none")]
	pub name: Option<String>,
	/// Icon displayed in the Admin App for the flow.
	#[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
	pub icon: Option<String>,
	/// Color of the icon displayed in the Admin App for the flow.
	#[serde(
		rename = "color",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub color: Option<Option<String>>,
	#[serde(
		rename = "description",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub description: Option<Option<String>>,
	/// Current status of the flow.
	#[serde(rename = "status", skip_serializing_if = "Option::is_none")]
	pub status: Option<Status>,
	/// Type of trigger for the flow. One of `hook`, `webhook`, `operation`, `schedule`, `manual`.
	#[serde(rename = "trigger", skip_serializing_if = "Option::is_none")]
	pub trigger: Option<String>,
	/// The permission used during the flow. One of `$public`, `$trigger`, `$full`, or UUID of a role.
	#[serde(rename = "accountability", skip_serializing_if = "Option::is_none")]
	pub accountability: Option<String>,
	/// Options of the selected trigger for the flow.
	#[serde(
		rename = "options",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub options: Option<Option<json::Value>>,
	#[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
	pub operation: Option<Box<super::FlowsOperation>>,
	/// Timestamp in ISO8601 when the flow was created.
	#[serde(
		rename = "date_created",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub date_created: Option<Option<String>>,
	#[serde(rename = "user_created", skip_serializing_if = "Option::is_none")]
	pub user_created: Option<Box<super::FlowsUserCreated>>,
	#[serde(
		rename = "operations",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub operations: Option<Option<Vec<super::FlowsOperationsInner>>>,
}

impl Flows {
	pub fn new() -> Flows {
		Flows {
			id: None,
			name: None,
			icon: None,
			color: None,
			description: None,
			status: None,
			trigger: None,
			accountability: None,
			options: None,
			operation: None,
			date_created: None,
			user_created: None,
			operations: None,
		}
	}
}
/// Current status of the flow.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Status {
	#[serde(rename = "active")]
	Active,
	#[serde(rename = "inactive")]
	Inactive,
}

impl Default for Status {
	fn default() -> Status {
		Self::Active
	}
}
