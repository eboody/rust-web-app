/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Roles {
  /// Unique identifier for the role.
  #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
  pub id: Option<String>,
  /// Name of the role.
  #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
  pub name: Option<String>,
  /// The role's icon.
  #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
  pub icon: Option<String>,
  /// Description of the role.
  #[serde(
    rename = "description",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub description: Option<Option<String>>,
  #[serde(
    rename = "parent",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub parent: Option<Option<Box<super::RolesParent>>>,
  /// $t:field_options.directus_roles.children_note
  #[serde(
    rename = "children",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub children: Option<Option<Vec<super::RolesChildrenInner>>>,
  #[serde(
    rename = "policies",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub policies: Option<Option<json::Value>>,
  #[serde(
    rename = "users",
    default,
    with = "::serde_with::rust::double_option",
    skip_serializing_if = "Option::is_none"
  )]
  pub users: Option<Option<Vec<super::RolesUsersInner>>>,
}

impl Roles {
  pub fn new() -> Roles {
    Roles {
      id: None,
      name: None,
      icon: None,
      description: None,
      parent: None,
      children: None,
      policies: None,
      users: None,
    }
  }
}
