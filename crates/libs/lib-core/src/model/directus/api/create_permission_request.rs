/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePermissionRequest {
	/// What collection this permission applies to.
	#[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
	pub collection: Option<String>,
	/// If the user can post comments.
	#[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
	pub comment: Option<Comment>,
	/// If the user can create items.
	#[serde(rename = "create", skip_serializing_if = "Option::is_none")]
	pub create: Option<Create>,
	/// If the user can update items.
	#[serde(rename = "delete", skip_serializing_if = "Option::is_none")]
	pub delete: Option<Delete>,
	/// If the user is required to leave a comment explaining what was changed.
	#[serde(rename = "explain", skip_serializing_if = "Option::is_none")]
	pub explain: Option<Explain>,
	/// If the user can read items.
	#[serde(rename = "read", skip_serializing_if = "Option::is_none")]
	pub read: Option<Read>,
	/// Unique identifier of the role this permission applies to.
	#[serde(rename = "role", skip_serializing_if = "Option::is_none")]
	pub role: Option<i32>,
	/// Explicitly denies read access for specific fields.
	#[serde(
		rename = "read_field_blacklist",
		skip_serializing_if = "Option::is_none"
	)]
	pub read_field_blacklist: Option<Vec<String>>,
	/// What status this permission applies to.
	#[serde(rename = "status", skip_serializing_if = "Option::is_none")]
	pub status: Option<String>,
	/// Explicitly denies specific statuses to be used.
	#[serde(rename = "status_blacklist", skip_serializing_if = "Option::is_none")]
	pub status_blacklist: Option<Vec<String>>,
	/// If the user can update items.
	#[serde(rename = "update", skip_serializing_if = "Option::is_none")]
	pub update: Option<Update>,
	/// Explicitly denies write access for specific fields.
	#[serde(
		rename = "write_field_blacklist",
		skip_serializing_if = "Option::is_none"
	)]
	pub write_field_blacklist: Option<Vec<String>>,
}

impl CreatePermissionRequest {
	pub fn new() -> CreatePermissionRequest {
		CreatePermissionRequest {
			collection: None,
			comment: None,
			create: None,
			delete: None,
			explain: None,
			read: None,
			role: None,
			read_field_blacklist: None,
			status: None,
			status_blacklist: None,
			update: None,
			write_field_blacklist: None,
		}
	}
}
/// If the user can post comments.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Comment {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "create")]
	Create,
	#[serde(rename = "update")]
	Update,
	#[serde(rename = "full")]
	Full,
}

impl Default for Comment {
	fn default() -> Comment {
		Self::None
	}
}
/// If the user can create items.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Create {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "full")]
	Full,
}

impl Default for Create {
	fn default() -> Create {
		Self::None
	}
}
/// If the user can update items.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Delete {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "mine")]
	Mine,
	#[serde(rename = "role")]
	Role,
	#[serde(rename = "full")]
	Full,
}

impl Default for Delete {
	fn default() -> Delete {
		Self::None
	}
}
/// If the user is required to leave a comment explaining what was changed.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Explain {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "create")]
	Create,
	#[serde(rename = "update")]
	Update,
	#[serde(rename = "always")]
	Always,
}

impl Default for Explain {
	fn default() -> Explain {
		Self::None
	}
}
/// If the user can read items.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Read {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "mine")]
	Mine,
	#[serde(rename = "role")]
	Role,
	#[serde(rename = "full")]
	Full,
}

impl Default for Read {
	fn default() -> Read {
		Self::None
	}
}
/// If the user can update items.
#[derive(
	Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize,
)]
pub enum Update {
	#[serde(rename = "none")]
	None,
	#[serde(rename = "mine")]
	Mine,
	#[serde(rename = "role")]
	Role,
	#[serde(rename = "full")]
	Full,
}

impl Default for Update {
	fn default() -> Update {
		Self::None
	}
}
