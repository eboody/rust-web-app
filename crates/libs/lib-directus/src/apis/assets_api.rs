/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait AssetsApi: Send + Sync {
	async fn get_asset<'id, 'key, 'transforms, 'download>(
		&self,
		id: &'id str,
		key: Option<&'key str>,
		transforms: Option<&'transforms str>,
		download: Option<bool>,
	) -> Result<String, Error<GetAssetError>>;
}

pub struct AssetsApiClient {
	configuration: Arc<configuration::Configuration>,
}

impl AssetsApiClient {
	pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
		Self { configuration }
	}
}

#[async_trait]
impl AssetsApi for AssetsApiClient {
	/// Image typed files can be dynamically resized and transformed to fit any need.
	async fn get_asset<'id, 'key, 'transforms, 'download>(
		&self,
		id: &'id str,
		key: Option<&'key str>,
		transforms: Option<&'transforms str>,
		download: Option<bool>,
	) -> Result<String, Error<GetAssetError>> {
		let local_var_configuration = &self.configuration;

		let local_var_client = &local_var_configuration.client;

		let local_var_uri_str = format!(
			"{}/assets/{id}",
			local_var_configuration.base_path,
			id = crate::apis::urlencode(id)
		);
		let mut local_var_req_builder = local_var_client
			.request(reqwest::Method::GET, local_var_uri_str.as_str());

		if let Some(ref local_var_str) = key {
			local_var_req_builder =
				local_var_req_builder.query(&[("key", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = transforms {
			local_var_req_builder = local_var_req_builder
				.query(&[("transforms", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_str) = download {
			local_var_req_builder = local_var_req_builder
				.query(&[("download", &local_var_str.to_string())]);
		}
		if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
			local_var_req_builder = local_var_req_builder
				.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
		}

		let local_var_req = local_var_req_builder.build()?;
		let local_var_resp = local_var_client.execute(local_var_req).await?;

		let local_var_status = local_var_resp.status();
		let local_var_content = local_var_resp.text().await?;

		if !local_var_status.is_client_error() && !local_var_status.is_server_error()
		{
			json::from_str(&local_var_content).map_err(Error::from)
		} else {
			let local_var_entity: Option<GetAssetError> =
				json::from_str(&local_var_content).ok();
			let local_var_error = ResponseContent {
				status: local_var_status,
				content: local_var_content,
				entity: local_var_entity,
			};
			Err(Error::ResponseError(local_var_error))
		}
	}
}

/// struct for typed errors of method [`get_asset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAssetError {
	Status404(models::GetAsset404Response),
	UnknownValue(json::Value),
}
