/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UpdateCollectionRequestMeta : Metadata of the collection.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateCollectionRequestMeta {
	/// Name of a Google Material Design Icon that's assigned to this collection.
	#[serde(
		rename = "icon",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub icon: Option<Option<String>>,
	/// Choose the color for the icon assigned to this collection.
	#[serde(
		rename = "color",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub color: Option<Option<String>>,
	/// A note describing the collection.
	#[serde(
		rename = "note",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub note: Option<Option<String>>,
	/// Text representation of how items from this collection are shown across the system.
	#[serde(
		rename = "display_template",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub display_template: Option<Option<String>>,
	/// Whether or not the collection is hidden from the navigation in the admin app.
	#[serde(rename = "hidden", skip_serializing_if = "Option::is_none")]
	pub hidden: Option<bool>,
	/// Whether or not the collection is treated as a single object.
	#[serde(rename = "singleton", skip_serializing_if = "Option::is_none")]
	pub singleton: Option<bool>,
	/// Key value pairs of how to show this collection's name in different languages in the admin app.
	#[serde(
		rename = "translation",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub translation: Option<Option<String>>,
	/// Whether or not Content Versioning is enabled for this collection.
	#[serde(rename = "versioning", skip_serializing_if = "Option::is_none")]
	pub versioning: Option<bool>,
	/// What field holds the archive value.
	#[serde(
		rename = "archive_field",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub archive_field: Option<Option<String>>,
	/// What value to use for \"archived\" items.
	#[serde(
		rename = "archive_app_filter",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub archive_app_filter: Option<Option<String>>,
	/// What value to use to \"unarchive\" items.
	#[serde(
		rename = "archive_value",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub archive_value: Option<Option<String>>,
	/// Whether or not to show the \"archived\" filter.
	#[serde(
		rename = "unarchive_value",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub unarchive_value: Option<Option<String>>,
	/// The sort field in the collection.
	#[serde(
		rename = "sort_field",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub sort_field: Option<Option<String>>,
}

impl UpdateCollectionRequestMeta {
	/// Metadata of the collection.
	pub fn new() -> UpdateCollectionRequestMeta {
		UpdateCollectionRequestMeta {
			icon: None,
			color: None,
			note: None,
			display_template: None,
			hidden: None,
			singleton: None,
			translation: None,
			versioning: None,
			archive_field: None,
			archive_app_filter: None,
			archive_value: None,
			unarchive_value: None,
			sort_field: None,
		}
	}
}
