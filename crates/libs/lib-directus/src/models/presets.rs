/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Presets {
	/// Unique identifier for this single collection preset.
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<i32>,
	/// Name for the bookmark. If this is set, the preset will be considered a bookmark.
	#[serde(
		rename = "bookmark",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub bookmark: Option<Option<String>>,
	#[serde(
		rename = "user",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub user: Option<Option<Box<models::PresetsUser>>>,
	#[serde(
		rename = "role",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub role: Option<Option<Box<models::PresetsRole>>>,
	#[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
	pub collection: Option<Box<models::PresetsCollection>>,
	/// Search query.
	#[serde(
		rename = "search",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub search: Option<Option<String>>,
	/// Key of the layout that is used.
	#[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
	pub layout: Option<String>,
	/// Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.
	#[serde(
		rename = "layout_query",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub layout_query: Option<Option<serde_json::Value>>,
	/// Options of the views. The properties in here are controlled by the layout.
	#[serde(
		rename = "layout_options",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub layout_options: Option<Option<serde_json::Value>>,
	#[serde(
		rename = "refresh_interval",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub refresh_interval: Option<Option<i32>>,
	#[serde(
		rename = "filter",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub filter: Option<Option<serde_json::Value>>,
	#[serde(
		rename = "icon",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub icon: Option<Option<String>>,
	#[serde(
		rename = "color",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub color: Option<Option<String>>,
}

impl Presets {
	pub fn new() -> Presets {
		Presets {
			id: None,
			bookmark: None,
			user: None,
			role: None,
			collection: None,
			search: None,
			layout: None,
			layout_query: None,
			layout_options: None,
			refresh_interval: None,
			filter: None,
			icon: None,
			color: None,
		}
	}
}
