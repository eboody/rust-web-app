/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Activity {
    /// Unique identifier for the object.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Action that was performed.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    #[serde(rename = "user", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub user: Option<Option<Box<models::ActivityUser>>>,
    /// When the action happened.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
    pub ip: Option<Box<models::ActivityIp>>,
    /// User agent string of the browser the user used when the action took place.
    #[serde(rename = "user_agent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
    #[serde(rename = "collection", skip_serializing_if = "Option::is_none")]
    pub collection: Option<Box<models::ActivityCollection>>,
    /// Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<String>,
    /// User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    /// Origin of the request when the action took place.
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    #[serde(rename = "revisions", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub revisions: Option<Option<Vec<models::ActivityRevisionsInner>>>,
}

impl Activity {
    pub fn new() -> Activity {
        Activity {
            id: None,
            action: None,
            user: None,
            timestamp: None,
            ip: None,
            user_agent: None,
            collection: None,
            item: None,
            comment: None,
            origin: None,
            revisions: None,
        }
    }
}
/// Action that was performed.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "create")]
    Create,
    #[serde(rename = "update")]
    Update,
    #[serde(rename = "delete")]
    Delete,
    #[serde(rename = "login")]
    Login,
}

impl Default for Action {
    fn default() -> Action {
        Self::Create
    }
}

