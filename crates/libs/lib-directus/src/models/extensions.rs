/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Extensions {
	#[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
	pub enabled: Option<bool>,
	#[serde(rename = "id", skip_serializing_if = "Option::is_none")]
	pub id: Option<uuid::Uuid>,
	#[serde(rename = "folder", skip_serializing_if = "Option::is_none")]
	pub folder: Option<String>,
	#[serde(rename = "source", skip_serializing_if = "Option::is_none")]
	pub source: Option<String>,
	/// Name of the bundle the extension is in.
	#[serde(
		rename = "bundle",
		default,
		with = "::serde_with::rust::double_option",
		skip_serializing_if = "Option::is_none"
	)]
	pub bundle: Option<Option<String>>,
}

impl Extensions {
	pub fn new() -> Extensions {
		Extensions {
			enabled: None,
			id: None,
			folder: None,
			source: None,
			bundle: None,
		}
	}
}
