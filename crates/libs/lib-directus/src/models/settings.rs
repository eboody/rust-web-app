/*
 * Dynamic API Specification
 *
 * This is a dynamically generated API specification for all endpoints existing on the current project.
 *
 * The version of the OpenAPI document: 11.2.2
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Settings {
    /// Unique identifier for the setting.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The name of the project.
    #[serde(rename = "project_name", skip_serializing_if = "Option::is_none")]
    pub project_name: Option<String>,
    /// The url of the project.
    #[serde(rename = "project_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_url: Option<Option<String>>,
    /// The brand color of the project.
    #[serde(rename = "project_color", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_color: Option<Option<String>>,
    /// The logo of the project.
    #[serde(rename = "project_logo", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_logo: Option<Option<String>>,
    /// The foreground of the project.
    #[serde(rename = "public_foreground", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_foreground: Option<Option<String>>,
    #[serde(rename = "public_background", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_background: Option<Option<Box<models::SettingsPublicBackground>>>,
    /// Note rendered on the public pages of the app.
    #[serde(rename = "public_note", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_note: Option<Option<String>>,
    /// Allowed authentication login attempts before the user's status is set to blocked.
    #[serde(rename = "auth_login_attempts", skip_serializing_if = "Option::is_none")]
    pub auth_login_attempts: Option<i32>,
    /// Authentication password policy.
    #[serde(rename = "auth_password_policy", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub auth_password_policy: Option<Option<String>>,
    /// What transformations are allowed in the assets endpoint.
    #[serde(rename = "storage_asset_transform", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub storage_asset_transform: Option<Option<StorageAssetTransform>>,
    /// Array of allowed
    #[serde(rename = "storage_asset_presets", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub storage_asset_presets: Option<Option<Vec<models::SettingsStorageAssetPresetsInner>>>,
    #[serde(rename = "custom_css", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_css: Option<Option<String>>,
    /// Default folder to place files
    #[serde(rename = "storage_default_folder", skip_serializing_if = "Option::is_none")]
    pub storage_default_folder: Option<uuid::Uuid>,
    #[serde(rename = "basemaps", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub basemaps: Option<Option<serde_json::Value>>,
    #[serde(rename = "mapbox_key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mapbox_key: Option<Option<String>>,
    #[serde(rename = "module_bar", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub module_bar: Option<Option<serde_json::Value>>,
    #[serde(rename = "project_descriptor", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_descriptor: Option<Option<String>>,
    #[serde(rename = "default_language", skip_serializing_if = "Option::is_none")]
    pub default_language: Option<String>,
    #[serde(rename = "custom_aspect_ratios", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub custom_aspect_ratios: Option<Option<serde_json::Value>>,
    #[serde(rename = "public_favicon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_favicon: Option<Option<Box<models::SettingsPublicFavicon>>>,
    #[serde(rename = "default_appearance", skip_serializing_if = "Option::is_none")]
    pub default_appearance: Option<String>,
    #[serde(rename = "default_theme_light", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_theme_light: Option<Option<String>>,
    #[serde(rename = "theme_light_overrides", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub theme_light_overrides: Option<Option<serde_json::Value>>,
    #[serde(rename = "default_theme_dark", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_theme_dark: Option<Option<String>>,
    #[serde(rename = "theme_dark_overrides", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub theme_dark_overrides: Option<Option<serde_json::Value>>,
    #[serde(rename = "report_error_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub report_error_url: Option<Option<String>>,
    #[serde(rename = "report_bug_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub report_bug_url: Option<Option<String>>,
    #[serde(rename = "report_feature_url", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub report_feature_url: Option<Option<String>>,
    /// $t:fields.directus_settings.public_registration_note
    #[serde(rename = "public_registration", skip_serializing_if = "Option::is_none")]
    pub public_registration: Option<bool>,
    /// $t:fields.directus_settings.public_registration_verify_email_note
    #[serde(rename = "public_registration_verify_email", skip_serializing_if = "Option::is_none")]
    pub public_registration_verify_email: Option<bool>,
    #[serde(rename = "public_registration_role", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_registration_role: Option<Option<Box<models::SettingsPublicRegistrationRole>>>,
    /// $t:fields.directus_settings.public_registration_email_filter_note
    #[serde(rename = "public_registration_email_filter", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_registration_email_filter: Option<Option<serde_json::Value>>,
}

impl Settings {
    pub fn new() -> Settings {
        Settings {
            id: None,
            project_name: None,
            project_url: None,
            project_color: None,
            project_logo: None,
            public_foreground: None,
            public_background: None,
            public_note: None,
            auth_login_attempts: None,
            auth_password_policy: None,
            storage_asset_transform: None,
            storage_asset_presets: None,
            custom_css: None,
            storage_default_folder: None,
            basemaps: None,
            mapbox_key: None,
            module_bar: None,
            project_descriptor: None,
            default_language: None,
            custom_aspect_ratios: None,
            public_favicon: None,
            default_appearance: None,
            default_theme_light: None,
            theme_light_overrides: None,
            default_theme_dark: None,
            theme_dark_overrides: None,
            report_error_url: None,
            report_bug_url: None,
            report_feature_url: None,
            public_registration: None,
            public_registration_verify_email: None,
            public_registration_role: None,
            public_registration_email_filter: None,
        }
    }
}
/// What transformations are allowed in the assets endpoint.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StorageAssetTransform {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "none")]
    None,
    #[serde(rename = "presets")]
    Presets,
}

impl Default for StorageAssetTransform {
    fn default() -> StorageAssetTransform {
        Self::All
    }
}

