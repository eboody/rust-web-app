//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directus_roles")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub name: String,
	pub icon: String,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
	pub parent: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::directus_access::Entity")]
	DirectusAccess,
	#[sea_orm(has_many = "super::directus_presets::Entity")]
	DirectusPresets,
	#[sea_orm(
		belongs_to = "Entity",
		from = "Column::Parent",
		to = "Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	SelfRef,
	#[sea_orm(has_many = "super::directus_settings::Entity")]
	DirectusSettings,
	#[sea_orm(has_many = "super::directus_shares::Entity")]
	DirectusShares,
	#[sea_orm(has_many = "super::directus_users::Entity")]
	DirectusUsers,
}

impl Related<super::directus_access::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusAccess.def()
	}
}

impl Related<super::directus_presets::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusPresets.def()
	}
}

impl Related<super::directus_settings::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusSettings.def()
	}
}

impl Related<super::directus_shares::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusShares.def()
	}
}

impl Related<super::directus_users::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusUsers.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
