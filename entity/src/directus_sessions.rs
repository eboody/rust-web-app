//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directus_sessions")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub token: String,
	pub user: Option<Uuid>,
	pub expires: DateTimeWithTimeZone,
	pub ip: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub user_agent: Option<String>,
	pub share: Option<Uuid>,
	pub origin: Option<String>,
	pub next_token: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::directus_shares::Entity",
		from = "Column::Share",
		to = "super::directus_shares::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	DirectusShares,
	#[sea_orm(
		belongs_to = "super::directus_users::Entity",
		from = "Column::User",
		to = "super::directus_users::Column::Id",
		on_update = "NoAction",
		on_delete = "Cascade"
	)]
	DirectusUsers,
}

impl Related<super::directus_shares::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusShares.def()
	}
}

impl Related<super::directus_users::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusUsers.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
