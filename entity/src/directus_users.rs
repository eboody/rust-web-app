//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directus_users")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub first_name: Option<String>,
	pub last_name: Option<String>,
	#[sea_orm(unique)]
	pub email: Option<String>,
	pub password: Option<String>,
	pub location: Option<String>,
	pub title: Option<String>,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
	pub tags: Option<Json>,
	pub avatar: Option<Uuid>,
	pub language: Option<String>,
	pub tfa_secret: Option<String>,
	pub status: String,
	pub role: Option<Uuid>,
	#[sea_orm(unique)]
	pub token: Option<String>,
	pub last_access: Option<DateTimeWithTimeZone>,
	pub last_page: Option<String>,
	pub provider: String,
	#[sea_orm(unique)]
	pub external_identifier: Option<String>,
	pub auth_data: Option<Json>,
	pub email_notifications: Option<bool>,
	pub appearance: Option<String>,
	pub theme_dark: Option<String>,
	pub theme_light: Option<String>,
	pub theme_light_overrides: Option<Json>,
	pub theme_dark_overrides: Option<Json>,
	pub other_avatar: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::directus_access::Entity")]
	DirectusAccess,
	#[sea_orm(has_many = "super::directus_dashboards::Entity")]
	DirectusDashboards,
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::OtherAvatar",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusFiles,
	#[sea_orm(has_many = "super::directus_flows::Entity")]
	DirectusFlows,
	#[sea_orm(has_many = "super::directus_operations::Entity")]
	DirectusOperations,
	#[sea_orm(has_many = "super::directus_panels::Entity")]
	DirectusPanels,
	#[sea_orm(has_many = "super::directus_presets::Entity")]
	DirectusPresets,
	#[sea_orm(
		belongs_to = "super::directus_roles::Entity",
		from = "Column::Role",
		to = "super::directus_roles::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusRoles,
	#[sea_orm(has_many = "super::directus_sessions::Entity")]
	DirectusSessions,
	#[sea_orm(has_many = "super::directus_shares::Entity")]
	DirectusShares,
	#[sea_orm(has_many = "super::ebooks_directus_users::Entity")]
	EbooksDirectusUsers,
}

impl Related<super::directus_access::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusAccess.def()
	}
}

impl Related<super::directus_dashboards::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusDashboards.def()
	}
}

impl Related<super::directus_files::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusFiles.def()
	}
}

impl Related<super::directus_flows::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusFlows.def()
	}
}

impl Related<super::directus_operations::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusOperations.def()
	}
}

impl Related<super::directus_panels::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusPanels.def()
	}
}

impl Related<super::directus_presets::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusPresets.def()
	}
}

impl Related<super::directus_roles::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusRoles.def()
	}
}

impl Related<super::directus_sessions::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusSessions.def()
	}
}

impl Related<super::directus_shares::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusShares.def()
	}
}

impl Related<super::ebooks_directus_users::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::EbooksDirectusUsers.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
