//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "articles")]
pub struct Model {
	#[sea_orm(primary_key, auto_increment = false)]
	pub id: Uuid,
	pub status: String,
	pub sort: Option<i32>,
	pub user_created: Option<Uuid>,
	pub date_created: Option<DateTimeWithTimeZone>,
	pub user_updated: Option<Uuid>,
	pub date_updated: Option<DateTimeWithTimeZone>,
	pub image: Option<Uuid>,
	pub author: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::articles_translations::Entity")]
	ArticlesTranslations,
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::Image",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusFiles,
	#[sea_orm(
		belongs_to = "super::directus_users::Entity",
		from = "Column::Author",
		to = "super::directus_users::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusUsers3,
	#[sea_orm(
		belongs_to = "super::directus_users::Entity",
		from = "Column::UserCreated",
		to = "super::directus_users::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusUsers2,
	#[sea_orm(
		belongs_to = "super::directus_users::Entity",
		from = "Column::UserUpdated",
		to = "super::directus_users::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusUsers1,
}

impl Related<super::articles_translations::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ArticlesTranslations.def()
	}
}

impl Related<super::directus_files::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusFiles.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
