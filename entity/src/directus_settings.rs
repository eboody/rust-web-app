//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "directus_settings")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: i32,
	pub project_name: String,
	pub project_url: Option<String>,
	pub project_color: String,
	pub project_logo: Option<Uuid>,
	pub public_foreground: Option<Uuid>,
	pub public_background: Option<Uuid>,
	#[sea_orm(column_type = "Text", nullable)]
	pub public_note: Option<String>,
	pub auth_login_attempts: Option<i32>,
	pub auth_password_policy: Option<String>,
	pub storage_asset_transform: Option<String>,
	pub storage_asset_presets: Option<Json>,
	#[sea_orm(column_type = "Text", nullable)]
	pub custom_css: Option<String>,
	pub storage_default_folder: Option<Uuid>,
	pub basemaps: Option<Json>,
	pub mapbox_key: Option<String>,
	pub module_bar: Option<Json>,
	pub project_descriptor: Option<String>,
	pub default_language: String,
	pub custom_aspect_ratios: Option<Json>,
	pub public_favicon: Option<Uuid>,
	pub default_appearance: String,
	pub default_theme_light: Option<String>,
	pub theme_light_overrides: Option<Json>,
	pub default_theme_dark: Option<String>,
	pub theme_dark_overrides: Option<Json>,
	pub report_error_url: Option<String>,
	pub report_bug_url: Option<String>,
	pub report_feature_url: Option<String>,
	pub public_registration: bool,
	pub public_registration_verify_email: bool,
	pub public_registration_role: Option<Uuid>,
	pub public_registration_email_filter: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::ProjectLogo",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusFiles4,
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::PublicBackground",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusFiles3,
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::PublicFavicon",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusFiles2,
	#[sea_orm(
		belongs_to = "super::directus_files::Entity",
		from = "Column::PublicForeground",
		to = "super::directus_files::Column::Id",
		on_update = "NoAction",
		on_delete = "NoAction"
	)]
	DirectusFiles1,
	#[sea_orm(
		belongs_to = "super::directus_folders::Entity",
		from = "Column::StorageDefaultFolder",
		to = "super::directus_folders::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusFolders,
	#[sea_orm(
		belongs_to = "super::directus_roles::Entity",
		from = "Column::PublicRegistrationRole",
		to = "super::directus_roles::Column::Id",
		on_update = "NoAction",
		on_delete = "SetNull"
	)]
	DirectusRoles,
}

impl Related<super::directus_folders::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusFolders.def()
	}
}

impl Related<super::directus_roles::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::DirectusRoles.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
